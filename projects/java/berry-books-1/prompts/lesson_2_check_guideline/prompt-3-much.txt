===============================================
ガイドライン準拠チェックプロンプト【高：詳細版】
===============================================

berry-books-1プロジェクトのソースコードがアーキテクチャガイドラインに準拠しているかを詳細にチェックしてください。

## チェック項目

### 1. レイヤーアーキテクチャの遵守

#### 1.1 4層構造の確認
- プレゼンテーション層：webパッケージ配下のクラス
- ビジネスロジック層：serviceパッケージ配下のクラス
- データアクセス層：daoパッケージ配下のクラス
- データモデル層：entityパッケージ配下のクラス

#### 1.2 依存関係の確認
- webパッケージのクラスがserviceのみに依存しているか（dao、entityへの直接依存は禁止）
- serviceパッケージのクラスがdaoとentityのみに依存しているか
- daoパッケージのクラスがentityのみに依存しているか
- 循環参照が存在しないか

#### 1.3 責務の分離
- Beanクラスにビジネスロジックが記述されていないか
- ServiceクラスにHTTPリクエスト処理が記述されていないか
- DAOクラスにビジネスルールが記述されていないか
- Entityクラスに処理ロジックが記述されていないか

---

### 2. パッケージ構成と命名規約

#### 2.1 パッケージ構成
- 機能単位でパッケージが分割されているか（book、cart、customer、order等）
- commonパッケージに共通クラスが配置されているか
- utilパッケージにユーティリティクラスが配置されているか

#### 2.2 命名規約の確認
- JSF Managed Bean：{機能名}Bean（例：SearchBean、CartBean）
- Service：{エンティティ名}Service（例：CustomerService、BookService）
- DAO：{エンティティ名}Dao（例：CustomerDao、BookDao）
- Entity：{エンティティ名}（例：Customer、Book）
- DTO/TO：{用途}TO（例：OrderTO、OrderSummaryTO）
- Business Exception：{業務エラー内容}Exception（例：OutOfStockException）

---

### 3. コンポーネント設計の詳細チェック

#### 3.1 プレゼンテーション層（Managed Bean）
対象ファイル：webパッケージ配下の*Bean.javaファイル

**チェック項目：**
- @Namedアノテーションが付与されているか
- 適切なスコープアノテーション（@ViewScoped、@SessionScoped、@RequestScoped）が付与されているか
- SessionScoped/ViewScopedの場合、Serializableを実装しているか
- ビジネスロジックがServiceに委譲されているか（Bean内に複雑なロジックがないか）
- アクションメソッドが遷移先を文字列で返しているか
- 依存するServiceが@Injectで注入されているか

#### 3.2 ビジネスロジック層（Service）
対象ファイル：serviceパッケージ配下の*Service.javaファイル

**チェック項目：**
- @ApplicationScopedアノテーションが付与されているか
- @Transactionalアノテーション（クラスレベルまたはメソッドレベル）が付与されているか
- ビジネスルールがServiceに集約されているか
- 依存するDAOが@Injectで注入されているか
- 業務検証がServiceで実施されているか

#### 3.3 データアクセス層（DAO）
対象ファイル：daoパッケージ配下の*Dao.javaファイル

**チェック項目：**
- @ApplicationScopedアノテーションが付与されているか
- @PersistenceContextでEntityManagerが注入されているか
- CRUD操作に専念し、ビジネスロジックが含まれていないか
- トランザクション制御（@Transactional）が記述されていないか

#### 3.4 データモデル層（Entity）
対象ファイル：entityパッケージ配下の*.javaファイル

**チェック項目：**
- @Entityアノテーションが付与されているか
- @Table、@Columnで物理名が明示的にマッピングされているか
- Serializableを実装しているか
- 引数なしのコンストラクタが定義されているか
- ビジネスロジックが含まれていないか（データ構造の表現に専念しているか）

---

### 4. ログ出力方式の詳細チェック

#### 4.1 ロギングフレームワーク
- SLF4J（org.slf4j.Logger）を使用しているか
- 各クラスでLoggerが以下の形式で定義されているか：
  ```
  private static final Logger logger = LoggerFactory.getLogger(ClassName.class);
  ```

#### 4.2 ログ出力フォーマット
- publicメソッドの開始時にINFOログが出力されているか
- ログフォーマットが「[ ClassName#methodName ]」形式になっているか
- 重要なパラメータがログに記録されているか（個人情報を除く）

#### 4.3 例外ログ
- システム例外がERRORレベルでログ出力されているか
- 業務例外がWARNレベルでログ出力されているか
- スタックトレースが適切に出力されているか

#### 4.4 個人情報の保護
- パスワード、クレジットカード番号等の個人情報がログに出力されていないか

---

### 5. トランザクション管理の詳細チェック

#### 5.1 トランザクション境界
- トランザクション境界がServiceレイヤーで定義されているか
- DAOレイヤーでトランザクション制御を行っていないか

#### 5.2 @Transactionalの使用
- Serviceクラスまたはメソッドに@Transactionalが付与されているか
- トランザクション属性（REQUIRED、REQUIRES_NEW等）が適切に設定されているか

#### 5.3 楽観的ロック
- 更新処理で楽観的ロックが使用されているか
- Entityに@Versionアノテーションが付与されているか
- OptimisticLockExceptionが適切にハンドリングされているか

---

### 6. 例外ハンドリングの詳細チェック

#### 6.1 例外の分類
- ビジネス例外がRuntimeExceptionを継承しているか
- ビジネス例外に適切な名前が付けられているか（*Exception）

#### 6.2 例外のハンドリング
- JSFのBeanで例外が適切にcatchされているか
- 例外発生時にFacesMessageでエラーメッセージが表示されているか
- 例外がログに記録されているか

#### 6.3 チェック例外
- チェック例外（checked exception）を使用していないか
- 全ての独自例外がRuntimeExceptionを継承しているか

---

### 7. 依存性注入の詳細チェック

#### 7.1 @Injectの使用
- BeanでのService注入に@Injectが使用されているか
- ServiceでのDAO注入に@Injectが使用されているか
- コンストラクタインジェクションやフィールドインジェクションが適切に使用されているか

#### 7.2 スコープの適切性
- ApplicationScopedがステートレスなクラスに使用されているか
- ViewScoped/SessionScopedがステートフルなクラスに使用されているか

---

### 8. Bean Validationの使用確認

#### 8.1 アノテーションの使用
- EntityやDTOに検証アノテーション（@NotNull、@Size、@Email等）が使用されているか
- 形式的な検証がBean Validationで実施されているか

#### 8.2 業務検証
- Bean Validationで表現できない複雑な検証がServiceで実施されているか
- 重複チェック等のデータベース整合性検証がServiceで実施されているか

---

### 9. その他の詳細チェック項目

#### 9.1 画面フロー（JSF）
- アクションメソッドが遷移先のビューIDを返しているか
- リダイレクト（faces-redirect=true）が適切に使用されているか
- 同じページに留まる場合にnullを返しているか

#### 9.2 セキュリティ
- 認証フィルタ（AuthenticationFilter）が実装されているか
- パスワードがハッシュ化されているか（平文保存されていないか）
- セッション管理が適切に行われているか

#### 9.3 コードの品質
- マジックナンバーが定数化されているか
- 適切なコメントが記述されているか
- コードの重複が最小化されているか

---

## 出力形式

各チェック項目について、以下の形式で報告してください：

**【準拠している項目】**
- 項目名：確認内容の要約

**【準拠していない項目】**
- 項目名：問題の内容
  - ファイル：具体的なファイルパス
  - クラス/メソッド：該当箇所
  - 問題点：ガイドラインとの差異
  - 推奨される対応：修正方法の提案

---

## 注意事項

- 全てのJavaソースファイル（Bean、Service、DAO、Entity）を対象にチェックしてください
- 準拠状況を定量的に把握できるよう、準拠率（準拠項目数/総項目数）も算出してください
- 軽微な違反と重大な違反を区別して報告してください

