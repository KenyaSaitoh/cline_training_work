===============================================
単体テスト作成プロンプト【中：適切版】
===============================================

DeliveryFeeService.javaの単体テストコードを作成してください。

## テスト対象

**クラス:** `pro.kensait.berrybooks.service.delivery.DeliveryFeeService`
**対象メソッド:**
- `calculateDeliveryFee(String deliveryAddress, BigDecimal totalPrice)`

## テスト仕様の参照

**必ず詳細設計書を参照してテストケースを作成してください：**
- ファイル: `spec/詳細設計書/BerryBooks_詳細設計書.md`
- セクション: 「8.2.2 配送料金計算ロジック」
- セクション: 「12.2 配送料金計算ロジック定数」

**詳細設計書に記載された仕様：**
1. 購入金額が5000円以上の場合：送料無料（0円）
2. 購入金額が5000円未満の場合：
   - 配送先が沖縄県の場合：1700円
   - 上記以外の場合：800円（標準配送料）

## テストケース

### calculateDeliveryFee()のテスト

**境界値分析を含むテストケース：**
- 送料無料の境界値（5000円、4999円、5001円）
- 沖縄県の配送料
- 通常配送料
- null値の扱い
- 0円の扱い

## 実装要件

- JUnit 5を使用
- テストクラス名: `DeliveryFeeServiceTest`
- パッケージ: `pro.kensait.berrybooks.service.delivery`
- 配置場所: `src/test/java/pro/kensait/berrybooks/service/delivery/`
- アサーションライブラリ: JUnit 5標準のassertions
- 各テストメソッドに@Testアノテーションを付与
- 各テストメソッドに適切な名前を付ける（何をテストしているか明確に）

## 注意事項

- 詳細設計書の仕様と実装コードに差異がある場合、詳細設計書の仕様に基づいてテストを作成してください
- 差異がある場合、テストが失敗することで不具合を検出できます
