===============================================
単体テスト作成プロンプト【高：詳細版】
===============================================

DeliveryFeeService.javaの単体テストコードを作成してください。

## テスト対象

**クラス:** `pro.kensait.berrybooks.service.delivery.DeliveryFeeService`
**ファイルパス:** `src/main/java/pro/kensait/berrybooks/service/delivery/DeliveryFeeService.java`

**対象メソッド:**
1. `calculateDeliveryFee(String deliveryAddress, BigDecimal totalPrice)` - 配送料金計算

---

## テスト仕様の参照（重要）

### 必ず詳細設計書を参照してテストケースを作成してください

**参照箇所:**
- ファイル: `spec/詳細設計書/BerryBooks_詳細設計書.md`
- セクション1: 「8.2.2 配送料金計算ロジック」（677-697行目）
- セクション2: 「12.2 配送料金計算ロジック定数」（1204-1210行目）

## テストクラスの構成

### 基本情報
- **テストクラス名:** `DeliveryFeeServiceTest`
- **パッケージ:** `pro.kensait.berrybooks.service.delivery`
- **配置場所:** `src/test/java/pro/kensait/berrybooks/service/delivery/DeliveryFeeServiceTest.java`
- **テストフレームワーク:** JUnit 5
- **アサーションライブラリ:** JUnit 5標準（`org.junit.jupiter.api.Assertions`）

---

## テストケース詳細

### 1. calculateDeliveryFee()のテストケース

#### 1.1 送料無料のテスト

**テストケース1-1: 購入金額が5000円の場合（境界値）**
- 入力: deliveryAddress="東京都渋谷区", totalPrice=5000
- 期待値: 0円（送料無料）

**テストケース1-2: 購入金額が5001円の場合（境界値+1）**
- 入力: deliveryAddress="東京都渋谷区", totalPrice=5001
- 期待値: 0円（送料無料）

**テストケース1-3: 購入金額が10000円の場合（十分に大きい値）**
- 入力: deliveryAddress="東京都渋谷区", totalPrice=10000
- 期待値: 0円（送料無料）

**テストケース1-4: 沖縄県でも5000円以上なら送料無料**
- 入力: deliveryAddress="沖縄県那覇市", totalPrice=5000
- 期待値: 0円（送料無料）

#### 1.4 エッジケースのテスト

**テストケース4-1: 購入金額が極小値の場合**
- 入力: deliveryAddress="東京都渋谷区", totalPrice=0.01
- 期待値: 800円

**テストケース4-2: 購入金額がnullの場合（異常系）**
- 入力: deliveryAddress="東京都渋谷区", totalPrice=null
- 期待: NullPointerExceptionまたは適切なハンドリング

---

## テストメソッド命名規約

各テストメソッドには以下の命名規約を適用してください：

**形式:** `test{メソッド名}_{テスト条件}_{期待結果}()`

**例:**
- `testCalculateDeliveryFee_購入金額5000円_送料無料()`
- `testCalculateDeliveryFee_沖縄県4999円_1700円()`
- `testCalculateDeliveryFee_東京都3000円_800円()`

@DisplayNameを使用：

---

## 重要な注意事項

### 1. テストの網羅性

以下の観点を網羅してください：
- **正常系:** 期待通りの動作をするケース
- **境界値:** 5000円、4999円、5001円など
- **異常系:** null、空文字列など
- **エッジケース:** 極小値、極大値など

### 2. テストの独立性

各テストメソッドは独立して実行可能であること：
- テストメソッド間で状態を共有しない
- テストの実行順序に依存しない
- @BeforeEachで初期化処理を行う

### 3. コメントとドキュメント

各テストメソッドには以下を記述：
- テストの目的
- 入力値
- 期待される出力値
- 特記事項（あれば）

---

## 期待される成果物

完全な単体テストクラス（`DeliveryFeeServiceTest.java`）：
- すべてのpublicメソッドをテスト
- 境界値分析を含む包括的なテストケース
- 詳細設計書の仕様に基づいたテスト
- 明確な命名とコメント
- JUnit 5のベストプラクティスに準拠
