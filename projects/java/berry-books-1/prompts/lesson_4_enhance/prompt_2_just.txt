===============================================
機能拡張プロンプト【中：適切版】
===============================================

berry-books-1プロジェクトに在庫チェック機能を追加してください。

## 実装内容

詳細設計書の「8.3.3 在庫チェックロジック詳細」に記載された仕様に従って、以下の機能を実装してください。

### 1. OutOfStockException例外クラスの作成

**パッケージ：** `pro.kensait.berrybooks.service.order`
**クラス名：** `OutOfStockException`

**実装内容：**
- RuntimeExceptionを継承
- フィールド：`bookId`（Integer）、`bookName`（String）
- コンストラクタ：書籍ID、書籍名、エラーメッセージを受け取る
- getterメソッド：`getBookId()`、`getBookName()`

---

### 2. OrderServiceへの在庫チェックロジック追加

**対象メソッド：** `OrderService.orderBooks()`

**実装箇所：** カート内の書籍をループ処理する部分（在庫減算の前）

**チェック条件：**
- 現在の在庫数 < 注文数 の場合に在庫不足と判定

**在庫不足時の処理：**
- `OutOfStockException`をスロー
- 例外には書籍ID、書籍名、エラーメッセージを含める
- トランザクションは自動的にロールバック

**在庫充分時の処理：**
- 既存の在庫減算処理を継続

---

### 3. OrderBeanでの例外ハンドリング追加

**対象メソッド：** `OrderBean.placeOrder()`（または注文確定処理を行うメソッド）

**実装内容：**
- `OutOfStockException`をcatchする
- エラーメッセージを構築（書籍名を含む）
- Flash Scopeにエラーメッセージを設定
- `orderError.xhtml`へリダイレクト

---

### 4. エラーメッセージの表示

**メッセージ形式：**
- 「在庫不足: {書籍名}」

**エラー画面：**
- `orderError.xhtml`でエラーメッセージを表示
- 必要に応じてエラーページを作成

---

## 参考情報

**詳細設計書：** `spec/詳細設計書/BerryBooks_詳細設計書.md`
- セクション：「8.3.3 在庫チェックロジック詳細」
  - チェックタイミング：注文確定時（OrderService.orderBooks()内）
  - 処理フロー：在庫情報取得 → 在庫数の比較 → 在庫不足時の処理
  - 実装上の注意点：トランザクション内で実行、楽観的ロックとの併用
- セクション：「14.2.1 OutOfStockException」
  - 例外クラスの仕様（パッケージ、継承元、フィールド、コンストラクタ）
