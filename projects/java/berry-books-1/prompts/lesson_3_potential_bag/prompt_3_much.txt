===============================================
潜在的不具合検出プロンプト【高：詳細版】
===============================================

berry-books-1プロジェクトのソースコードから潜在的な不具合を詳細に検出してください。

## 検出項目

### 1. バリデーション関連の詳細チェック

#### 1.1 入力値検証
- **必須チェック**：@NotNull、@NotBlank、@NotEmptyの使用漏れ
- **形式チェック**：メールアドレス（@Email）、電話番号、郵便番号等の形式検証漏れ
- **範囲チェック**：@Size、@Min、@Maxの設定漏れや不適切な範囲設定
- **正規表現チェック**：@Patternの使用漏れや正規表現の誤り
- **カスタムバリデーション**：業務ルール検証の実装漏れ

#### 1.2 Bean Validationの適用
- Entityクラスでのバリデーションアノテーション不足
- Managed Beanでのバリデーションアノテーション不足
- DTOでのバリデーションアノテーション不足
- バリデーショングループの不適切な使用

#### 1.3 業務検証
- 重複チェックの漏れ
- 存在チェックの漏れ
- 相関チェックの漏れ
- 日付の妥当性チェック漏れ

---

### 2. null安全性の詳細チェック

#### 2.1 nullチェック漏れ
- メソッド引数のnullチェック漏れ
- メソッド戻り値のnullチェック漏れ
- データベース検索結果のnullチェック漏れ
- コレクション要素のnullチェック漏れ

#### 2.2 NullPointerException発生リスク
- null参照に対するメソッド呼び出し
- null参照に対するフィールドアクセス
- オートアンボクシングでのnull
- 三項演算子でのnull

#### 2.3 Optional型の使用
- Optional型を使用すべき箇所で使用していない
- Optional型の不適切なチェック方法（isPresent() + get()）

---

### 3. 例外処理の詳細チェック

#### 3.1 例外ハンドリング漏れ
- チェック例外のハンドリング漏れ
- RuntimeExceptionのハンドリング漏れ
- 特定の業務例外のハンドリング漏れ

#### 3.2 不適切な例外処理
- 空のcatchブロック（例外を握りつぶす）
- ログ出力なしでのcatch
- 例外の再スロー時に元例外を捨てる
- 汎用的すぎるException catchによる隠蔽

#### 3.3 リソース管理
- try-with-resourcesの使用漏れ
- finally節でのクローズ処理漏れ
- EntityManagerのクローズ漏れ
- Connectionのクローズ漏れ
- Streamのクローズ漏れ

---

### 4. トランザクション管理の詳細チェック

#### 4.1 トランザクション境界
- Serviceメソッドでの@Transactional付与漏れ
- 更新処理でのトランザクション設定漏れ
- 複数DAO操作でのトランザクション統合漏れ

#### 4.2 トランザクション属性
- トランザクション属性の不適切な設定
- REQUIRES_NEWの誤用
- NOT_SUPPORTEDの誤用
- 読み取り専用トランザクションの設定漏れ

#### 4.3 トランザクションのロールバック
- 例外発生時の明示的ロールバック漏れ
- チェック例外でのロールバック設定漏れ

---

### 5. データ整合性の詳細チェック

#### 5.1 制約違反
- 一意制約違反の可能性（重複チェック漏れ）
- 外部キー制約違反の可能性（参照整合性チェック漏れ）
- NOT NULL制約違反の可能性

#### 5.2 データ不整合
- 複数テーブル更新時の整合性確保漏れ
- マスターデータとトランザクションデータの整合性
- 集計値と明細の不整合
- ステータス遷移の妥当性チェック漏れ

#### 5.3 データ削除
- 論理削除と物理削除の選択誤り
- 関連データの削除漏れ
- カスケード削除の設定漏れ

---

### 6. 並行処理・排他制御の詳細チェック

#### 6.1 楽観的ロック
- @Versionアノテーションの付与漏れ
- OptimisticLockExceptionのハンドリング漏れ
- バージョン番号の初期化漏れ
- **バージョン番号の不適切な使用**：更新時に現在のバージョン番号ではなく、読み取り時点のバージョン番号を使用しているか
  - 例：カート追加時のバージョンを保持し、注文時にそれを使用する
  - 現在の最新バージョンを使用すると、楽観的ロックが正しく機能しない

#### 6.2 悲観的ロック
- 悲観的ロックが必要な処理での実装漏れ
- LockModeTypeの不適切な選択
- デッドロックの可能性

#### 6.3 競合状態
- Race Conditionが発生する可能性のある処理
- 在庫管理等での排他制御漏れ
- カウンタの加算処理での競合

#### 6.4 スレッドセーフ
- ApplicationScopedクラスでのステート管理
- 静的フィールドへの書き込み
- シングルトンでの共有リソースアクセス

---

### 7. セキュリティの詳細チェック

#### 7.1 SQLインジェクション
- 文字列連結によるSQL生成
- PreparedStatementの不使用
- JPQLでのパラメータ化漏れ

#### 7.2 認証・認可
- 認証フィルタの適用漏れ
- 未認証でのアクセス可能な画面・API
- 権限チェックの漏れ
- セッションハイジャック対策の不足

#### 7.3 パスワード管理
- パスワードの平文保存
- 弱いハッシュアルゴリズムの使用
- ソルトの未使用
- パスワードのログ出力

#### 7.4 個人情報保護
- 個人情報のログ出力
- 個人情報の暗号化漏れ
- 個人情報の不適切な表示

#### 7.5 クロスサイトスクリプティング（XSS）
- ユーザー入力のエスケープ漏れ
- HTMLタグの許可による脆弱性

#### 7.6 クロスサイトリクエストフォージェリ（CSRF）
- CSRFトークンの実装漏れ

---

### 8. リソース管理の詳細チェック

#### 8.1 メモリリーク
- コレクションへの無制限な追加
- リスナーの登録解除漏れ
- 大きなオブジェクトの長時間保持
- キャッシュのクリア漏れ

#### 8.2 データベースリソース
- ConnectionPoolの枯渇の可能性
- EntityManagerのクローズ漏れ
- 長時間トランザクションの保持

#### 8.3 ファイルリソース
- ファイルハンドルのクローズ漏れ
- 一時ファイルの削除漏れ
- ファイルロックの解放漏れ

---

### 9. ロジックエラーの詳細チェック

#### 9.1 条件分岐
- if-else-ifでのelse漏れ
- switch文でのdefault漏れ
- 複雑な条件式での論理エラー
- 早期returnによる処理漏れ

#### 9.2 ループ処理
- 無限ループの可能性
- ループカウンタの範囲エラー
- off-by-oneエラー
- ループ内での不適切な変更

#### 9.3 計算処理
- 整数除算による精度落ち
- オーバーフロー・アンダーフローの可能性
- 浮動小数点演算の誤差
- 0除算の可能性

#### 9.4 境界値処理
- 最小値・最大値の処理漏れ
- 空文字列・空コレクションの処理漏れ
- 日付の境界値処理（月末、年末等）

#### 9.5 文字列処理
- 文字列結合のパフォーマンス問題（+演算子の連続使用）
- 文字エンコーディングの指定漏れ
- trim()の使用漏れ

---

### 10. パフォーマンスの詳細チェック

#### 10.1 データベースアクセス
- N+1問題の発生
- 不要なSELECT文の実行
- インデックスを使用しないクエリ
- 全件検索の実行

#### 10.2 ループ処理
- ループ内でのデータベースアクセス
- ループ内での不要なオブジェクト生成
- 二重ループの最適化漏れ

#### 10.3 コレクション処理
- 不適切なコレクション型の選択
- ArrayList vs LinkedListの選択誤り
- Stream APIの不適切な使用

---

### 11. コード品質の詳細チェック

#### 11.1 マジックナンバー
- ハードコードされた数値
- ハードコードされた文字列
- 定数化すべき値

#### 11.2 コードの重複
- 同じロジックの複数箇所での実装
- コピー＆ペーストによる重複
- 共通化すべき処理

#### 11.3 非推奨API
- @Deprecatedの付いたAPIの使用
- 古いAPIの使用
- 推奨されない実装パターン

#### 11.4 設計の問題
- 責務の不明確なクラス
- 肥大化したメソッド
- 過度な依存関係
- インターフェースの欠如

---

### 12. Jakarta EE特有の問題

#### 12.1 CDI
- スコープの不適切な選択
- @Injectの使用漏れ
- プロデューサーメソッドの設定漏れ

#### 12.2 JPA
- エンティティのSerializable実装漏れ
- 引数なしコンストラクタの定義漏れ
- リレーションシップの設定誤り
- Lazy/Eager Fetchingの不適切な選択

#### 12.3 JSF
- ViewScopedでのSerializable実装漏れ
- 画面遷移でのリダイレクト指定漏れ（POST-Redirect-GET）
- FacesMessageの設定漏れ

---

## 出力形式

各不具合について、以下の形式で報告してください：

### 【重大度：高】
**不具合種別：{種別名}**
- **ファイル**：{ファイルパス}
- **クラス/メソッド**：{クラス名}#{メソッド名}（行番号）
- **問題の内容**：{具体的な問題点}
- **発生し得る影響**：{システムへの影響、ユーザーへの影響}
- **再現条件**：{問題が発生する条件}
- **修正方法**：{具体的な修正の推奨方法}
- **優先度**：{緊急/高/中/低}

### 【重大度：中】
（同様の形式）

### 【重大度：低】
（同様の形式）

---

## 統計情報

検出結果の統計を以下の形式で報告してください：

- **検出した不具合の総数**：
- **重大度別の内訳**：
  - 重大度：高 - {件数}
  - 重大度：中 - {件数}
  - 重大度：低 - {件数}
- **種別ごとの内訳**：
  - バリデーション関連 - {件数}
  - null安全性 - {件数}
  - 例外処理 - {件数}
  - （以下同様）

---

## 注意事項

- 全てのJavaソースファイルを対象に検出してください
- 誤検出（False Positive）を避けるため、確実に問題がある箇所のみを報告してください
- 軽微な問題も見逃さず、網羅的に検出してください
- コーディング規約違反ではなく、実際に不具合につながる可能性のある問題に焦点を当ててください

