<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<sst xmlns="http://schemas.openxmlformats.org/spreadsheetml/2006/main" count="1676" uniqueCount="1202"><si><t>Version: 1.0</t></si><si><t>作成日: 2025年10月25日</t></si><si><t>システム名: Berry Books オンライン書店システム</t></si><si><t>プロジェクト名: berry-books-mvc</t></si><si><t>目次</t></si><si><t>[システム概要](#1-システム概要)</t></si><si><t>[アーキテクチャ基本方針](#2-アーキテクチャ基本方針)</t></si><si><t>[技術スタック](#3-技術スタック)</t></si><si><t>[コンポーネント構成](#4-コンポーネント構成)</t></si><si><t>[認証・認可方式](#5-認証認可方式)</t></si><si><t>[画面遷移](#6-画面遷移)</t></si><si><t>[セッション管理](#7-セッション管理)</t></si><si><t>[ビジネスロジック](#8-ビジネスロジック)</t></si><si><t>[DBアクセス方式](#9-dbアクセス方式)</t></si><si><t>[他システム接続方式（API連携）](#10-他システム接続方式api連携)</t></si><si><t>[データモデル](#11-データモデル)</t></si><si><t>[定数・設定値](#12-定数設定値)</t></si><si><t>[エラーメッセージ](#13-エラーメッセージ)</t></si><si><t>[例外処理](#14-例外処理)</t></si><si><t>[トランザクション管理](#15-トランザクション管理)</t></si><si><t>[セキュリティ対策](#16-セキュリティ対策)</t></si><si><t>[デプロイメント構成](#17-デプロイメント構成)</t></si><si><t>1. システム概要</t></si><si><t>1.1 システムの目的</t></si><si><t>Berry Booksは、Jakarta EE 10とJSF (Jakarta Server Faces) 4.0を使用したオンライン書店のWebアプリケーションです。</t></si><si><t>ユーザーは書籍の検索、カートへの追加、注文処理などのEC機能を利用できます。</t></si><si><t>1.2 システムの特徴</t></si><si><t>項目</t></si><si><t>内容</t></si><si><t>アプリケーション形態</t></si><si><t>Webアプリケーション（MVC型）</t></si><si><t>ユーザー対象</t></si><si><t>エンドユーザー（一般顧客）</t></si><si><t>主要機能</t></si><si><t>書籍検索、ショッピングカート、注文処理、注文履歴参照</t></si><si><t>開発目的</t></si><si><t>Jakarta EE学習用サンプルアプリケーション</t></si><si><t>1.3 システムの制約</t></si><si><t>制約項目</t></si><si><t>認証方式</t></si><si><t>平文パスワード認証（学習用のため暗号化なし）</t></si><si><t>セキュリティ</t></si><si><t>HTTPS未使用（開発環境）</t></si><si><t>スケーラビリティ</t></si><si><t>単一サーバー構成</t></si><si><t>ペイメント</t></si><si><t>決済システム未連携（受注情報の記録のみ）</t></si><si><t>2. アーキテクチャ基本方針</t></si><si><t>2.1 アーキテクチャパターン</t></si><si><t>MVC (Model-View-Controller) パターンを採用</t></si><si><t>┌─────────────────────────────────────────────┐
│         Presentation Layer (View)          │
│    JSF Facelets (XHTML) + CSS + JS        │
└──────────────────┬──────────────────────────┘
                   │
┌──────────────────▼──────────────────────────┐
│       Controller Layer (Managed Bean)       │
│   @Named @SessionScoped / @ViewScoped      │
│   LoginBean, CartBean, OrderBean, etc.     │
└──────────────────┬──────────────────────────┘
                   │
┌──────────────────▼──────────────────────────┐
│        Business Logic Layer (Service)       │
│         @ApplicationScoped @Inject          │
│   OrderService, BookService, etc.          │
└──────────────────┬──────────────────────────┘
                   │
┌──────────────────▼──────────────────────────┐
│      Data Access Layer (DAO/Repository)     │
│         @ApplicationScoped + JPA            │
│   OrderTranDao, BookDao, StockDao, etc.    │
└──────────────────┬──────────────────────────┘
                   │
┌──────────────────▼──────────────────────────┐
│           Persistence Layer (JPA)           │
│              @Entity + JPA 3.1              │
│   OrderTran, Book, Customer, etc.          │
└──────────────────┬──────────────────────────┘
                   │
┌──────────────────▼──────────────────────────┐
│            Database (HSQLDB)                │
│          testdb (HSQLDB 2.7.x)             │
└─────────────────────────────────────────────┘</t></si><si><t>2.2 レイヤー責務定義</t></si><si><t>レイヤー</t></si><si><t>責務</t></si><si><t>実装技術</t></si><si><t>Presentation</t></si><si><t>UI表示、ユーザー入力受付、バリデーション表示</t></si><si><t>JSF Facelets (XHTML), CSS</t></si><si><t>Controller</t></si><si><t>画面遷移制御、入力検証、Serviceへの処理委譲</t></si><si><t>JSF Managed Bean (@Named)</t></si><si><t>Service</t></si><si><t>ビジネスロジック、トランザクション境界</t></si><si><t>CDI Bean (@ApplicationScoped)</t></si><si><t>DAO</t></si><si><t>データアクセス、クエリ発行、CRUD操作</t></si><si><t>JPA + EntityManager</t></si><si><t>Entity</t></si><si><t>ドメインモデル、データベーステーブルマッピング</t></si><si><t>JPA Entity (@Entity)</t></si><si><t>2.3 依存性注入 (DI) 方針</t></si><si><t>• CDI (Contexts and Dependency Injection) を使用</t></si><si><t>• `@Inject` アノテーションによるコンストラクタインジェクション、フィールドインジェクション</t></si><si><t>• インターフェースと実装の分離は必要最小限（OrderServiceIFのみ）</t></si><si><t>2.4 トランザクション管理方針</t></si><si><t>• JTA (Jakarta Transactions) を使用</t></si><si><t>• サービス層で `@Transactional` アノテーションによる宣言的トランザクション管理</t></si><si><t>• トランザクション境界はServiceメソッド単位</t></si><si><t>3. 技術スタック</t></si><si><t>3.1 サーバー・ミドルウェア</t></si><si><t>バージョン</t></si><si><t>用途</t></si><si><t>JDK</t></si><si><t>21</t></si><si><t>Java実行環境</t></si><si><t>Payara Server</t></si><si><t>6.x</t></si><si><t>Jakarta EEアプリケーションサーバー</t></si><si><t>HSQLDB</t></si><si><t>2.7.x</t></si><si><t>リレーショナルデータベース</t></si><si><t>Gradle</t></si><si><t>8.x</t></si><si><t>ビルドツール</t></si><si><t>3.2 Jakarta EE仕様</t></si><si><t>仕様</t></si><si><t>Jakarta Platform</t></si><si><t>10</t></si><si><t>Java EEプラットフォーム</t></si><si><t>Jakarta Server Faces (JSF)</t></si><si><t>4.0</t></si><si><t>MVCフレームワーク</t></si><si><t>Jakarta Persistence (JPA)</t></si><si><t>3.1</t></si><si><t>O/Rマッピング</t></si><si><t>Jakarta Transactions (JTA)</t></si><si><t>2.0</t></si><si><t>トランザクション管理</t></si><si><t>Jakarta CDI</t></si><si><t>依存性注入</t></si><si><t>Jakarta Bean Validation</t></si><si><t>3.0</t></si><si><t>バリデーション</t></si><si><t>Jakarta RESTful Web Services</t></si><si><t>REST API（将来対応）</t></si><si><t>Jakarta Servlet</t></si><si><t>6.0</t></si><si><t>サーブレット基盤</t></si><si><t>3.3 JPA実装</t></si><si><t>プロバイダー</t></si><si><t>EclipseLink (Payaraデフォルト)</t></si><si><t>データベースプラットフォーム</t></si><si><t>`org.eclipse.persistence.platform.database.HSQLPlatform`</t></si><si><t>トランザクションタイプ</t></si><si><t>JTA</t></si><si><t>3.4 フロントエンド技術</t></si><si><t>テンプレートエンジン</t></si><si><t>JSF Facelets (XHTML)</t></si><si><t>スタイルシート</t></si><si><t>CSS3</t></si><si><t>JavaScript</t></si><si><t>バニラJS（最小限使用）</t></si><si><t>4. コンポーネント構成</t></si><si><t>4.1 パッケージ構成</t></si><si><t>4.2 主要コンポーネント一覧</t></si><si><t>4.2.1 Entity層</t></si><si><t>クラス名</t></si><si><t>テーブル名</t></si><si><t>`Book`</t></si><si><t>BOOK + STOCK</t></si><si><t>書籍情報と在庫（SecondaryTableで結合）</t></si><si><t>`Category`</t></si><si><t>CATEGORY</t></si><si><t>カテゴリ情報</t></si><si><t>`Publisher`</t></si><si><t>PUBLISHER</t></si><si><t>出版社情報</t></si><si><t>`Stock`</t></si><si><t>STOCK</t></si><si><t>在庫情報（悲観的ロック用）</t></si><si><t>`Customer`</t></si><si><t>CUSTOMER</t></si><si><t>顧客情報</t></si><si><t>`OrderTran`</t></si><si><t>ORDER_TRAN</t></si><si><t>注文取引（ヘッダー）</t></si><si><t>`OrderDetail`</t></si><si><t>ORDER_DETAIL</t></si><si><t>注文明細（明細行）</t></si><si><t>`OrderDetailPK`</t></si><si><t>-</t></si><si><t>注文明細の複合主キー</t></si><si><t>4.2.2 DAO層</t></si><si><t>主要メソッド</t></si><si><t>`BookDao`</t></si><si><t>書籍データアクセス</t></si><si><t>`findById()`, `findAll()`, `queryByCategory()`, `queryByKeyword()`, `searchWithCriteria()`</t></si><si><t>`CategoryDao`</t></si><si><t>カテゴリデータアクセス</t></si><si><t>`findAll()`, `findById()`</t></si><si><t>`CustomerDao`</t></si><si><t>顧客データアクセス</t></si><si><t>`findById()`, `findByEmail()`, `register()`</t></si><si><t>`StockDao`</t></si><si><t>在庫データアクセス</t></si><si><t>`findById()`, `findByIdWithLock()` (悲観的ロック)</t></si><si><t>`OrderTranDao`</t></si><si><t>注文取引データアクセス</t></si><si><t>`findById()`, `findByCustomerId()`, `findOrderHistoryByCustomerId()`, `persist()`</t></si><si><t>`OrderDetailDao`</t></si><si><t>注文明細データアクセス</t></si><si><t>`findById()`, `findByOrderTranId()`, `persist()`</t></si><si><t>DAO層の機能概要:</t></si><si><t>BookDao:</t></si><si><t>• 書籍の検索機能を提供（主キー検索、カテゴリ検索、キーワード検索）</t></si><si><t>• 静的クエリ（JPQL）と動的クエリ（Criteria API）の両方をサポート</t></si><si><t>• カテゴリとキーワードの組み合わせ検索に対応</t></si><si><t>StockDao:</t></si><si><t>• 在庫情報のアクセスを提供</t></si><si><t>• 悲観的ロック（PESSIMISTIC_WRITE）による排他制御をサポート</t></si><si><t>• 注文時の在庫減算処理で使用</t></si><si><t>OrderTranDao:</t></si><si><t>• 注文取引（ヘッダー）の永続化と検索機能を提供</t></si><si><t>• 顧客IDによる注文履歴検索（3パターン実装）</t></si><si><t>• DTO投影によるパフォーマンス最適化</t></si><si><t>• FETCH JOINによる明細の一括取得</t></si><si><t>OrderDetailDao:</t></si><si><t>• 注文明細の永続化と検索機能を提供</t></si><si><t>• 複合主キー（OrderTranId + OrderDetailId）による検索</t></si><si><t>• 注文IDによる明細一覧取得</t></si><si><t>CustomerDao:</t></si><si><t>• 顧客情報のCRUD操作を提供</t></si><si><t>• メールアドレスによる一意検索（ログイン認証用）</t></si><si><t>• 顧客登録時の重複チェックに使用</t></si><si><t>CategoryDao:</t></si><si><t>• カテゴリマスタの参照機能を提供</t></si><si><t>• 書籍検索時のセレクトボックス用データ取得</t></si><si><t>4.2.3 Service層</t></si><si><t>トランザクション</t></si><si><t>`BookService`</t></si><si><t>書籍ビジネスロジック</t></si><si><t>なし（参照のみ）</t></si><si><t>`CategoryService`</t></si><si><t>カテゴリビジネスロジック</t></si><si><t>`CustomerService`</t></si><si><t>顧客登録・認証</t></si><si><t>`@Transactional`</t></si><si><t>`OrderService`</t></si><si><t>注文処理、注文履歴取得</t></si><si><t>Service層の機能概要:</t></si><si><t>BookService:</t></si><si><t>• 書籍検索ロジックの提供（カテゴリ、キーワード、複合条件）</t></si><si><t>• 静的クエリと動的クエリの切り替え</t></si><si><t>• 全書籍一覧の取得</t></si><si><t>• 書籍詳細情報の取得</t></si><si><t>• DAOを呼び出してデータを取得し、Managed Beanに返却</t></si><si><t>CategoryService:</t></si><si><t>• カテゴリマスタの取得</t></si><si><t>• カテゴリIDとカテゴリ名のマッピング作成（セレクトボックス用）</t></si><si><t>• カテゴリマスタデータの提供</t></si><si><t>CustomerService:</t></si><si><t>• 顧客登録処理（メールアドレス重複チェック含む）</t></si><si><t>• ログイン認証（メールアドレス＋パスワード）</t></si><si><t>• 顧客情報の取得</t></si><si><t>• トランザクション管理（登録時）</t></si><si><t>OrderService:</t></si><si><t>• 注文処理の中核ロジック（在庫チェック、在庫減算、注文永続化）</t></si><si><t>• 注文履歴の取得（3パターン実装：エンティティ返却、DTO返却、FETCH JOIN）</t></si><si><t>• 注文明細の取得</t></si><si><t>• 在庫不足例外のハンドリング</t></si><si><t>• トランザクション管理（注文確定時）</t></si><si><t>• 悲観的ロックによる排他制御</t></si><si><t>4.2.4 Managed Bean層</t></si><si><t>スコープ</t></si><si><t>`LoginBean`</t></si><si><t>`@SessionScoped`</t></si><si><t>ログイン・ログアウト処理、ログイン状態管理</t></si><si><t>`CustomerBean`</t></si><si><t>顧客情報保持、顧客登録</t></si><si><t>`BookSearchBean`</t></si><si><t>書籍検索、検索条件保持</t></si><si><t>`CartBean`</t></si><si><t>カート操作（追加・削除・クリア）</t></si><si><t>`CartSession`</t></si><si><t>カート状態保持</t></si><si><t>`OrderBean`</t></si><si><t>`@ViewScoped`</t></si><si><t>注文確定処理、注文履歴表示</t></si><si><t>4.2.5 Filter</t></si><si><t>URL Pattern</t></si><si><t>`AuthenticationFilter`</t></si><si><t>`*.xhtml`</t></si><si><t>認証チェック、未ログインユーザーのリダイレクト</t></si><si><t>5. 認証・認可方式</t></si><si><t>5.1 認証方式</t></si><si><t>カスタム認証（平文パスワード）</t></si><si><t>メールアドレス + パスワード</t></si><si><t>パスワード保存形式</t></si><si><t>平文（※学習用のため）</t></si><si><t>認証実装</t></si><si><t>`CustomerService.authenticate()`</t></si><si><t>セッション管理</t></si><si><t>`LoginBean` (SessionScoped)</t></si><si><t>5.2 認証フロー</t></si><si><t>┌────────────┐
│  ユーザー   │
└─────┬──────┘
      │ ①メールアドレス・パスワード入力
      ▼
┌────────────────────┐
│ index.xhtml        │
│ (ログインフォーム)   │
└─────┬──────────────┘
      │ ②processLogin()呼び出し
      ▼
┌────────────────────┐
│  LoginBean         │
│  @SessionScoped    │
└─────┬──────────────┘
      │ ③authenticate()呼び出し
      ▼
┌────────────────────┐
│ CustomerService    │
└─────┬──────────────┘
      │ ④findByEmail()
      ▼
┌────────────────────┐
│  CustomerDao       │
└─────┬──────────────┘
      │ ⑤SELECT * FROM CUSTOMER WHERE EMAIL = ?
      ▼
┌────────────────────┐
│   HSQLDB           │
└─────┬──────────────┘
      │ ⑥Customerエンティティ返却
      ▼
┌────────────────────┐
│  LoginBean         │
│  loggedIn = true   │
│  CustomerBean設定   │
└─────┬──────────────┘
      │ ⑦画面遷移
      ▼
┌────────────────────┐
│ bookSelect.xhtml   │
│ (書籍選択ページ)     │
└────────────────────┘</t></si><si><t>5.3 認可方式（アクセス制御）</t></si><si><t>Servlet Filterによる認可制御</t></si><si><t>ページ</t></si><si><t>認証要否</t></si><si><t>説明</t></si><si><t>`index.xhtml`</t></si><si><t>不要</t></si><si><t>ログインページ</t></si><si><t>`customerInput.xhtml`</t></si><si><t>顧客登録ページ</t></si><si><t>`customerOutput.xhtml`</t></si><si><t>登録完了ページ</t></si><si><t>`/jakarta.faces.resource/*`</t></si><si><t>CSS、画像などの静的リソース</t></si><si><t>上記以外の全ページ</t></si><si><t>必要</t></si><si><t>ログイン済みユーザーのみアクセス可</t></si><si><t>5.4 ログアウト処理</t></si><si><t>• セッションを無効化（`invalidateSession()`）</t></si><si><t>• トップページ（index.xhtml）へリダイレクト</t></si><si><t>6. 画面遷移</t></si><si><t>6.1 画面遷移図</t></si><si><t xml:space="preserve">                    ┌──────────────────┐
                    │  index.xhtml     │
                    │  (ログイン)       │
                    └────┬────────┬────┘
                         │        │
                 ログイン │        │ 新規登録
                         │        │
                         │        ▼
                         │   ┌──────────────────┐
                         │   │customerInput.xhtml│
                         │   │ (顧客登録)         │
                         │   └────┬─────────────┘
                         │        │
                         │        ▼
                         │   ┌──────────────────┐
                         │   │customerOutput.xhtml│
                         │   │ (登録完了)         │
                         │   └──────────────────┘
                         │
                         ▼
          ┌──────────────────────┐
          │  bookSelect.xhtml    │  ◄──┐
          │  (書籍一覧)           │     │
          └─┬──────────────────┬─┘     │
            │                  │       │
    カート追加│          検索実行 │       │
            │                  │       │
            ▼                  ▼       │
  ┌─────────────────┐   ┌──────────────────┐
  │ cartView.xhtml  │   │ bookSearch.xhtml │
  │ (カート確認)     │   │ (書籍検索)        │
  └─┬───────────────┘   └────┬─────────────┘
    │                          │ 検索
    │注文に進む                 │
    │                          ▼
    ▼                    (bookSelect.xhtmlへ)
  ┌─────────────────┐
  │ bookOrder.xhtml │
  │ (注文確認)       │
  └─┬───────────────┘
    │
    │注文確定
    │
    ▼
  ┌─────────────────┐
  │orderSuccess.xhtml│
  │ (注文完了)       │
  └─┬───────────────┘
    │
    │注文履歴へ
    │
    ▼
  ┌─────────────────────┐
  │ orderHistory.xhtml  │  ─┐
  │ (注文履歴一覧)       │   │
  └─┬───────────────────┘   │ 3パターンあり
    │                       │
    │明細表示                │
    │                       │
    ▼                       │
  ┌─────────────────────┐   │
  │ orderDetail.xhtml   │  ─┘
  │ (注文明細詳細)       │
  └─────────────────────┘</t></si><si><t>6.2 画面一覧</t></si><si><t>画面ID</t></si><si><t>画面名</t></si><si><t>ファイル名</t></si><si><t>Managed Bean</t></si><si><t>P001</t></si><si><t>ログイン画面</t></si><si><t>P002</t></si><si><t>顧客登録画面</t></si><si><t>P003</t></si><si><t>登録完了画面</t></si><si><t>P004</t></si><si><t>書籍検索画面</t></si><si><t>`bookSearch.xhtml`</t></si><si><t>P005</t></si><si><t>書籍一覧画面</t></si><si><t>`bookSelect.xhtml`</t></si><si><t>`BookSearchBean`, `CartBean`</t></si><si><t>P006</t></si><si><t>カート確認画面</t></si><si><t>`cartView.xhtml`</t></si><si><t>`CartBean`, `CartSession`</t></si><si><t>P007</t></si><si><t>カートクリア完了</t></si><si><t>`cartClear.xhtml`</t></si><si><t>P008</t></si><si><t>注文確認画面</t></si><si><t>`bookOrder.xhtml`</t></si><si><t>`CartSession`, `OrderBean`</t></si><si><t>P009</t></si><si><t>注文完了画面</t></si><si><t>`orderSuccess.xhtml`</t></si><si><t>P010</t></si><si><t>注文エラー画面</t></si><si><t>`orderError.xhtml`</t></si><si><t>P011</t></si><si><t>注文履歴画面（方式1）</t></si><si><t>`orderHistory.xhtml`</t></si><si><t>P012</t></si><si><t>注文履歴画面（方式2）</t></si><si><t>`orderHistory2.xhtml`</t></si><si><t>P013</t></si><si><t>注文履歴画面（方式3）</t></si><si><t>`orderHistory3.xhtml`</t></si><si><t>P014</t></si><si><t>注文明細詳細画面</t></si><si><t>`orderDetail.xhtml`</t></si><si><t>6.3 画面遷移条件</t></si><si><t>遷移元</t></si><si><t>遷移先</t></si><si><t>トリガー</t></si><si><t>条件</t></si><si><t>index.xhtml</t></si><si><t>bookSelect.xhtml</t></si><si><t>ログインボタン</t></si><si><t>認証成功</t></si><si><t>customerInput.xhtml</t></si><si><t>新規登録リンク</t></si><si><t>customerOutput.xhtml</t></si><si><t>登録ボタン</t></si><si><t>バリデーション成功</t></si><si><t>bookSearch.xhtml</t></si><si><t>検索ボタン</t></si><si><t>cartView.xhtml</t></si><si><t>カートに追加ボタン</t></si><si><t>検索ページリンク</t></si><si><t>買い物を続けるリンク</t></si><si><t>bookOrder.xhtml</t></si><si><t>注文するボタン</t></si><si><t>カートが空でない</t></si><si><t>orderSuccess.xhtml</t></si><si><t>注文確定ボタン</t></si><si><t>在庫あり、バリデーション成功</t></si><si><t>orderError.xhtml</t></si><si><t>在庫不足</t></si><si><t>orderHistory.xhtml</t></si><si><t>注文履歴リンク</t></si><si><t>orderDetail.xhtml</t></si><si><t>明細表示リンク</t></si><si><t>7. セッション管理</t></si><si><t>7.1 セッションスコープBean</t></si><si><t>Bean</t></si><si><t>保持データ</t></si><si><t>ライフサイクル</t></si><si><t>ログイン状態、入力値</t></si><si><t>ログイン〜ログアウト</t></si><si><t>顧客情報（Customer）</t></si><si><t>検索条件、検索結果</t></si><si><t>カート操作用メソッド</t></si><si><t>カート内容、配送情報、決済方法</t></si><si><t>7.2 CartSessionデータ構造</t></si><si><t>フィールド名</t></si><si><t>型</t></si><si><t>`List&lt;CartItem&gt;`</t></si><si><t>カートに追加された書籍のリスト（スレッドセーフ）</t></si><si><t>`BigDecimal`</t></si><si><t>商品合計金額</t></si><si><t>配送料金（1冊250円、4冊以上は1000円固定）</t></si><si><t>`String`</t></si><si><t>配送先住所</t></si><si><t>`Integer`</t></si><si><t>決済方法（1:銀行振込、2:クレジットカード、3:着払い）</t></si><si><t>7.3 CartItemデータ構造</t></si><si><t>`bookId`</t></si><si><t>書籍ID</t></si><si><t>`bookName`</t></si><si><t>書籍名</t></si><si><t>`publisherName`</t></si><si><t>出版社名</t></si><si><t>`price`</t></si><si><t>価格（注文数×単価）</t></si><si><t>`count`</t></si><si><t>注文数</t></si><si><t>`remove`</t></si><si><t>`boolean`</t></si><si><t>削除フラグ（チェックボックス用）</t></si><si><t>7.4 セッションタイムアウト設定</t></si><si><t>[xml]</t></si><si><t>&lt;!-- web.xml --&gt;
&lt;session-config&gt;
    &lt;session-timeout&gt;60&lt;/session-timeout&gt;
    &lt;cookie-config&gt;
        &lt;http-only&gt;true&lt;/http-only&gt;
        &lt;secure&gt;false&lt;/secure&gt;
    &lt;/cookie-config&gt;
&lt;/session-config&gt;</t></si><si><t>値</t></si><si><t>タイムアウト時間</t></si><si><t>60分</t></si><si><t>無操作60分でセッション無効化</t></si><si><t>HttpOnly</t></si><si><t>true</t></si><si><t>JavaScriptからのCookieアクセス禁止</t></si><si><t>Secure</t></si><si><t>false</t></si><si><t>HTTP通信でもCookie送信（開発環境用）</t></si><si><t>8. ビジネスロジック</t></si><si><t>8.1 書籍検索ロジック</t></si><si><t>8.1.1 検索パターン</t></si><si><t>パターン</t></si><si><t>categoryId</t></si><si><t>keyword</t></si><si><t>実行メソッド</t></si><si><t>1</t></si><si><t>あり</t></si><si><t>`BookDao.query(categoryId, keyword)`</t></si><si><t>2</t></si><si><t>なし</t></si><si><t>`BookDao.queryByCategory(categoryId)`</t></si><si><t>3</t></si><si><t>`BookDao.queryByKeyword(keyword)`</t></si><si><t>4</t></si><si><t>`BookDao.findAll()`</t></si><si><t>8.1.2 動的クエリ検索（Criteria API）</t></si><si><t>• CriteriaBuilderを使用して条件を動的に構築</t></si><si><t>• categoryIdとkeywordの有無に応じて条件を追加</t></si><si><t>• Predicateリストで条件を管理</t></si><si><t>8.2 カート管理ロジック</t></si><si><t>8.2.1 書籍追加ロジック</t></si><si><t>処理フロー:</t></si><si><t>BookServiceから書籍情報を取得</t></si><si><t>カート内に同じ書籍が存在するかチェック</t></si><si><t>存在する場合：注文数と金額を加算</t></si><si><t>存在しない場合：新しいCartItemを作成しカートに追加</t></si><si><t>合計金額を更新</t></si><si><t>8.2.2 配送料金計算ロジック</t></si><si><t>8.3 注文処理ロジック</t></si><si><t>8.3.1 注文処理フロー</t></si><si><t>8.3.2 在庫管理（悲観的ロック）</t></si><si><t>ロックタイプ</t></si><si><t>JPA定数</t></si><si><t>SQL効果</t></si><si><t>悲観的書き込みロック</t></si><si><t>`LockModeType.PESSIMISTIC_WRITE`</t></si><si><t>`SELECT ... FOR UPDATE`</t></si><si><t>在庫チェック処理:</t></si><si><t>悲観的ロックで在庫を取得（排他制御）</t></si><si><t>在庫数から注文数を減算した残数をチェック</t></si><si><t>残数が0未満の場合は`OutOfStockException`をスロー</t></si><si><t>残数が0以上の場合は在庫数を更新</t></si><si><t>8.4 注文履歴取得ロジック</t></si><si><t>8.4.1 注文履歴取得パターン</t></si><si><t>方式</t></si><si><t>メソッド</t></si><si><t>戻り値</t></si><si><t>特徴</t></si><si><t>方式1</t></si><si><t>`getOrderHistory()`</t></si><si><t>`List&lt;OrderTran&gt;`</t></si><si><t>エンティティをそのまま返却</t></si><si><t>方式2</t></si><si><t>`getOrderHistory2()`</t></si><si><t>`List&lt;OrderHistoryTO&gt;`</t></si><si><t>DTOで明細レベルの詳細データ返却</t></si><si><t>方式3</t></si><si><t>`getOrderHistory3()`</t></si><si><t>FETCH JOINで明細を含めて取得</t></si><si><t>8.4.2 方式2の特徴（DTO使用）</t></si><si><t>• コンストラクター式を使用してDTOを直接生成</t></si><si><t>• 必要なフィールドのみを取得（パフォーマンス最適化）</t></si><si><t>• INNER JOINで注文、明細、書籍、出版社を結合</t></si><si><t>• 注文日、注文ID、明細ID、書籍名、出版社名、価格、数量を返却</t></si><si><t>9. DBアクセス方式</t></si><si><t>9.1 JPA設定</t></si><si><t>9.1.1 persistence.xml</t></si><si><t>PersistenceUnit名</t></si><si><t>`bookstorePU`</t></si><si><t>EntityManagerの識別名</t></si><si><t>`JTA`</t></si><si><t>コンテナ管理トランザクション</t></si><si><t>データソース</t></si><si><t>`jdbc/HsqldbDS`</t></si><si><t>JNDI名</t></si><si><t>DBプラットフォーム</t></si><si><t>`HSQLPlatform`</t></si><si><t>HSQLDB用SQLダイアレクト</t></si><si><t>ログレベル</t></si><si><t>`FINE`</t></si><si><t>詳細ログ出力</t></si><si><t>9.2 データソース設定</t></si><si><t>接続プール名</t></si><si><t>`HsqldbPool`</t></si><si><t>データベースURL</t></si><si><t>`jdbc:hsqldb:hsql://localhost:9001/testdb`</t></si><si><t>ドライバークラス</t></si><si><t>`org.hsqldb.jdbcDriver`</t></si><si><t>ユーザー名</t></si><si><t>`SA`</t></si><si><t>パスワード</t></si><si><t>（空文字）</t></si><si><t>9.3 エンティティマッピング戦略</t></si><si><t>9.3.1 主キー生成戦略</t></si><si><t>テーブル</t></si><si><t>主キー</t></si><si><t>生成戦略</t></si><si><t>BOOK</t></si><si><t>BOOK_ID</t></si><si><t>`IDENTITY` (自動採番)</t></si><si><t>CATEGORY_ID</t></si><si><t>PUBLISHER_ID</t></si><si><t>CUSTOMER_ID</t></si><si><t>ORDERTRANID</t></si><si><t>(ORDERTRANID, ORDERDETAILID)</t></si><si><t>複合主キー（アプリで採番）</t></si><si><t>手動設定（BOOKと同じID）</t></si><si><t>9.3.2 リレーションシップマッピング</t></si><si><t>エンティティ1</t></si><si><t>関係</t></si><si><t>エンティティ2</t></si><si><t>マッピング方法</t></si><si><t>Book</t></si><si><t>N:1</t></si><si><t>Category</t></si><si><t>`@ManyToOne` + `@JoinColumn`</t></si><si><t>Publisher</t></si><si><t>1:1</t></si><si><t>Stock</t></si><si><t>`@SecondaryTable`</t></si><si><t>OrderTran</t></si><si><t>1:N</t></si><si><t>OrderDetail</t></si><si><t>`@OneToMany` (mappedBy)</t></si><si><t>`@ManyToOne` (insertable=false, updatable=false)</t></si><si><t>9.3.3 複合主キーマッピング</t></si><si><t>OrderDetailPKクラス:</t></si><si><t>• `orderTranId`と`orderDetailId`の2つのフィールド</t></si><si><t>• `equals()`と`hashCode()`の実装必須</t></si><si><t>OrderDetailエンティティ:</t></si><si><t>• `@IdClass(OrderDetailPK.class)`で複合主キー指定</t></si><si><t>• 両フィールドに`@Id`アノテーション付与</t></si><si><t>9.4 クエリ実装パターン</t></si><si><t>9.4.1 JPQL（静的クエリ）</t></si><si><t>• TypedQueryを使用</t></si><si><t>• パラメータバインディング（`:paramName`形式）</t></si><si><t>• SQLインジェクション対策</t></si><si><t>9.4.2 Criteria API（動的クエリ）</t></si><si><t>• CriteriaBuilder、CriteriaQuery、Rootを使用</t></si><si><t>• Predicateリストで条件を動的に構築</t></si><si><t>• 条件の有無に応じてクエリを組み立て</t></si><si><t>9.4.3 DTO投影（コンストラクター式）</t></si><si><t>• `SELECT new パッケージ名.DTO名(...)`形式</t></si><si><t>• 必要なフィールドのみを取得</t></si><si><t>• パフォーマンス最適化</t></si><si><t>9.5 フェッチ戦略</t></si><si><t>エンティティ</t></si><si><t>リレーション</t></si><si><t>フェッチタイプ</t></si><si><t>理由</t></si><si><t>Book → Category</t></si><si><t>`@ManyToOne`</t></si><si><t>`EAGER`（デフォルト）</t></si><si><t>カテゴリ情報は常に必要</t></si><si><t>Book → Publisher</t></si><si><t>出版社情報は常に必要</t></si><si><t>OrderTran → OrderDetail</t></si><si><t>`@OneToMany`</t></si><si><t>`EAGER`（明示指定）</t></si><si><t>明細は常に必要</t></si><si><t>OrderDetail → Book</t></si><si><t>書籍情報は常に必要</t></si><si><t>10. 他システム接続方式（API連携）</t></si><si><t>10.1 外部システム連携概要</t></si><si><t>11. データモデル</t></si><si><t>11.1 ER図</t></si><si><t>┌──────────────┐
│  PUBLISHER   │
│──────────────│
│ PUBLISHER_ID │◄──┐
│ PUBLISHER_NAME│  │
└──────────────┘  │
                   │
┌──────────────┐  │      ┌──────────────┐
│  CATEGORY    │  │      │   STOCK      │
│──────────────│  │      │──────────────│
│ CATEGORY_ID  │◄─┐  ┌──►│ BOOK_ID  (PK)│
│ CATEGORY_NAME│  │  │   │ QUANTITY     │
└──────────────┘  │  │   │ VERSION      │
                   │  │   └──────────────┘
         ┌─────────┴──┴─────────┐
         │        BOOK          │
         │──────────────────────│
         │ BOOK_ID (PK)         │
         │ BOOK_NAME            │
         │ AUTHOR               │
         │ CATEGORY_ID (FK)     │
         │ PUBLISHER_ID (FK)    │
         │ PRICE                │
         └──────────┬───────────┘
                    │
                    │
         ┌──────────▼───────────┐
         │    ORDER_DETAIL      │
         │──────────────────────│
         │ ORDER_TRAN_ID (PK,FK)│
         │ ORDER_DETAIL_ID (PK) │
         │ BOOK_ID (FK)         │◄───┐
         │ PRICE                │    │
         │ COUNT                │    │
         └──────────┬───────────┘    │
                    │                │
         ┌──────────▼───────────┐    │
         │    ORDER_TRAN        │    │
         │──────────────────────│    │
         │ ORDER_TRAN_ID (PK)   │    │
         │ ORDER_DATE           │    │
         │ CUSTOMER_ID (FK)     │    │
         │ TOTAL_PRICE          │    │
         │ DELIVERY_PRICE       │    │
         │ DELIVERY_ADDRESS     │    │
         │ SETTLEMENT_TYPE      │    │
         └──────────┬───────────┘    │
                    │                │
         ┌──────────▼───────────┐    │
         │      CUSTOMER        │    │
         │──────────────────────│    │
         │ CUSTOMER_ID (PK)     │    │
         │ CUSTOMER_NAME        │    │
         │ EMAIL                │    │
         │ PASSWORD             │    │
         │ BIRTHDAY             │    │
         │ ADDRESS              │    │
         └──────────────────────┘    │</t></si><si><t>11.2 テーブル定義</t></si><si><t>11.2.1 PUBLISHER（出版社）</t></si><si><t>カラム名</t></si><si><t>NULL</t></si><si><t>デフォルト</t></si><si><t>制約</t></si><si><t>INTEGER</t></si><si><t>NOT NULL</t></si><si><t>IDENTITY</t></si><si><t>PK</t></si><si><t>出版社ID（自動採番）</t></si><si><t>PUBLISHER_NAME</t></si><si><t>VARCHAR(30)</t></si><si><t>主キー: `PUBLISHER_ID`</t></si><si><t>11.2.2 CATEGORY（カテゴリ）</t></si><si><t>カテゴリID（自動採番）</t></si><si><t>CATEGORY_NAME</t></si><si><t>VARCHAR(20)</t></si><si><t>カテゴリ名</t></si><si><t>主キー: `CATEGORY_ID`</t></si><si><t>11.2.3 BOOK（書籍）</t></si><si><t>書籍ID（自動採番）</t></si><si><t>BOOK_NAME</t></si><si><t>VARCHAR(80)</t></si><si><t>AUTHOR</t></si><si><t>VARCHAR(40)</t></si><si><t>著者名</t></si><si><t>INT</t></si><si><t>FK</t></si><si><t>カテゴリID</t></si><si><t>出版社ID</t></si><si><t>PRICE</t></si><si><t>価格（円）</t></si><si><t>主キー: `BOOK_ID`</t></si><si><t>外部キー:</t></si><si><t>• `FKCATEGORYID`: CATEGORY(CATEGORY_ID)</t></si><si><t>• `FKPUBLISHERID`: PUBLISHER(PUBLISHER_ID)</t></si><si><t>11.2.4 STOCK（在庫）</t></si><si><t>QUANTITY</t></si><si><t>在庫数</t></si><si><t>VERSION</t></si><si><t>BIGINT</t></si><si><t>楽観的ロック用バージョン番号</t></si><si><t>備考: BOOKテーブルと1:1関係</t></si><si><t>11.2.5 CUSTOMER（顧客）</t></si><si><t>顧客ID（自動採番）</t></si><si><t>CUSTOMER_NAME</t></si><si><t>VARCHAR(50)</t></si><si><t>顧客名</t></si><si><t>EMAIL</t></si><si><t>VARCHAR(100)</t></si><si><t>UNIQUE</t></si><si><t>メールアドレス</t></si><si><t>PASSWORD</t></si><si><t>パスワード（平文）</t></si><si><t>BIRTHDAY</t></si><si><t>DATE</t></si><si><t>生年月日</t></si><si><t>ADDRESS</t></si><si><t>VARCHAR(200)</t></si><si><t>住所</t></si><si><t>主キー: `CUSTOMER_ID`</t></si><si><t>インデックス: EMAIL（UNIQUE制約）</t></si><si><t>11.2.6 ORDER_TRAN（注文取引）</t></si><si><t>注文取引ID（自動採番）</t></si><si><t>ORDER_DATE</t></si><si><t>注文日</t></si><si><t>顧客ID</t></si><si><t>TOTAL_PRICE</t></si><si><t>注文金額合計（円）</t></si><si><t>DELIVERY_PRICE</t></si><si><t>配送料金（円）</t></si><si><t>DELIVERY_ADDRESS</t></si><si><t>SETTLEMENT_TYPE</t></si><si><t>主キー: `ORDERTRANID`</t></si><si><t>• `FKCUSTOMERID`: CUSTOMER(CUSTOMER_ID)</t></si><si><t>11.2.7 ORDER_DETAIL（注文明細）</t></si><si><t>PK, FK</t></si><si><t>注文取引ID</t></si><si><t>ORDERDETAILID</t></si><si><t>注文明細ID（アプリ採番）</t></si><si><t>購入時点の価格（円）</t></si><si><t>COUNT</t></si><si><t>主キー: `(ORDERTRANID, ORDERDETAILID)`</t></si><si><t>• `FKORDERTRANID`: ORDERTRAN(ORDERTRANID)</t></si><si><t>• `FKBOOKID`: BOOK(BOOK_ID)</t></si><si><t>11.3 マスタデータ</t></si><si><t>11.3.1 PUBLISHER（出版社）</t></si><si><t>デジタルフロンティア出版</t></si><si><t>コードブレイクプレス</t></si><si><t>ネットワークノード出版</t></si><si><t>クラウドキャスティング社</t></si><si><t>5</t></si><si><t>データドリフト社</t></si><si><t>11.3.2 CATEGORY（カテゴリ）</t></si><si><t>Java</t></si><si><t>SpringBoot</t></si><si><t>SQL</t></si><si><t>HTML/CSS</t></si><si><t>6</t></si><si><t>Python</t></si><si><t>7</t></si><si><t>生成AI</t></si><si><t>8</t></si><si><t>クラウド</t></si><si><t>9</t></si><si><t>AWS</t></si><si><t>11.3.3 BOOK（書籍）</t></si><si><t>全50冊のデータが登録されています。以下は抜粋：</t></si><si><t>Java SEディープダイブ</t></si><si><t>Michael Johnson</t></si><si><t>3400</t></si><si><t>JVMとバイトコードの探求</t></si><si><t>James Lopez</t></si><si><t>4200</t></si><si><t>Jakarta EE究極テストガイド</t></si><si><t>Thomas Rodriguez</t></si><si><t>5200</t></si><si><t>SpringBoot in Cloud</t></si><si><t>Paul Martin</t></si><si><t>3000</t></si><si><t>14</t></si><si><t>データベースの科学</t></si><si><t>Mark Jackson</t></si><si><t>2500</t></si><si><t>23</t></si><si><t>JavaScriptマジック</t></si><si><t>Adam Wright</t></si><si><t>2800</t></si><si><t>30</t></si><si><t>Pythonプログラミング実践入門</t></si><si><t>Alice Carter</t></si><si><t>36</t></si><si><t>生成AIシステム設計ガイド</t></si><si><t>Fiona Walker</t></si><si><t>42</t></si><si><t>クラウドアーキテクチャ実践パターン</t></si><si><t>Kevin Anderson</t></si><si><t>3900</t></si><si><t>46</t></si><si><t>AWS設計原則とベストプラクティス</t></si><si><t>Oliver Ramirez</t></si><si><t>11.4 データ整合性制約</t></si><si><t>制約種別</t></si><si><t>制約内容</t></si><si><t>外部キー制約</t></si><si><t>CATEGORYIDはCATEGORY.CATEGORYIDに存在</t></si><si><t>PUBLISHERIDはPUBLISHER.PUBLISHERIDに存在</t></si><si><t>CUSTOMERIDはCUSTOMER.CUSTOMERIDに存在</t></si><si><t>ORDERTRANIDはORDERTRAN.ORDERTRAN_IDに存在</t></si><si><t>BOOKIDはBOOK.BOOKIDに存在</t></si><si><t>一意制約</t></si><si><t>EMAILは一意</t></si><si><t>NOT NULL制約</t></si><si><t>全テーブル</t></si><si><t>主キーはNOT NULL</t></si><si><t>12. 定数・設定値</t></si><si><t>12.3 アプリケーション設定</t></si><si><t>12.3.1 web.xml設定値</t></si><si><t>設定項目</t></si><si><t>設定値</t></si><si><t>`jakarta.faces.PROJECT_STAGE`</t></si><si><t>`Development`</t></si><si><t>JSF実行ステージ（開発モード）</t></si><si><t>`jakarta.faces.FACELETSSKIPCOMMENTS`</t></si><si><t>`true`</t></si><si><t>Faceletsコメント除去</t></si><si><t>`jakarta.faces.STATESAVINGMETHOD`</t></si><si><t>`server`</t></si><si><t>ビューステートをサーバー側に保存</t></si><si><t>`session-timeout`</t></si><si><t>`60`</t></si><si><t>セッションタイムアウト（分）</t></si><si><t>12.3.2 persistence.xml設定値</t></si><si><t>`eclipselink.target-database`</t></si><si><t>`eclipselink.logging.level`</t></si><si><t>ログレベル（詳細）</t></si><si><t>`eclipselink.jdbc.user`</t></si><si><t>DBユーザー名</t></si><si><t>`eclipselink.jdbc.password`</t></si><si><t>DBパスワード</t></si><si><t>12.3.3 config.properties</t></si><si><t>プロパティキー</t></si><si><t>`customer.api.base-url`</t></si><si><t>`http://localhost:8081/customers`</t></si><si><t>顧客APIのベースURL（将来用）</t></si><si><t>13. エラーメッセージ</t></si><si><t>13.1 メッセージプロパティファイル</t></si><si><t>ファイル: `src/main/resources/messages.properties`</t></si><si><t>メッセージキー</t></si><si><t>メッセージ内容</t></si><si><t>`typeMismatch.int`</t></si><si><t>数値を入力してください</t></si><si><t>`typeMismatch.java.time.LocalDate`</t></si><si><t>yyyy/M/d形式で入力してください</t></si><si><t>`error.address.prefecture`</t></si><si><t>都道府県名が正しく入力されていません</t></si><si><t>`error.customer.exists`</t></si><si><t>すでに指定されたメールアドレスは登録されています</t></si><si><t>`error.email.not-exist`</t></si><si><t>メールアドレスが存在しません</t></si><si><t>`error.password.unmatch`</t></si><si><t>指定されたパスワードが間違っているようです</t></si><si><t>`error.cart.empty`</t></si><si><t>カートに商品が一つも入っていません</t></si><si><t>`error.order.outof-stock`</t></si><si><t>注文された書籍「{0}」は、指定された個数、在庫に存在しません</t></si><si><t>`error.order.optimistic-lock`</t></si><si><t>別の顧客によって在庫が更新されました</t></si><si><t>13.2 画面表示メッセージ</t></si><si><t>13.2.1 ログイン失敗</t></si><si><t>メッセージ種別</t></si><si><t>メッセージ</t></si><si><t>SEVERITY</t></si><si><t>ERROR</t></si><si><t>サマリー</t></si><si><t>ログインに失敗しました</t></si><si><t>詳細</t></si><si><t>メールアドレスまたはパスワードが正しくありません</t></si><si><t>13.2.2 カート空エラー</t></si><si><t>WARN</t></si><si><t>カートに商品が入っていません</t></si><si><t>13.2.3 在庫不足エラー</t></si><si><t>注文された書籍「{書籍名}」の在庫が不足しています</t></si><si><t>14. 例外処理</t></si><si><t>14.1 例外クラス階層</t></si><si><t>14.2 業務例外</t></si><si><t>14.2.1 OutOfStockException（在庫不足例外）</t></si><si><t>14.3 システム例外</t></si><si><t>例外クラス</t></si><si><t>発生条件</t></si><si><t>ハンドリング方法</t></si><si><t>14.4 例外処理フロー</t></si><si><t>15. トランザクション管理</t></si><si><t>15.1 トランザクション境界</t></si><si><t>トランザクション境界: Serviceメソッド単位</t></si><si><t>実装方式: `@Transactional` アノテーション（宣言的トランザクション）</t></si><si><t>15.2 トランザクション属性</t></si><si><t>クラス</t></si><si><t>トランザクション属性</t></si><si><t>`orderBooks()`</t></si><si><t>`REQUIRED`</t></si><si><t>トランザクション必須（新規開始または既存参加）</t></si><si><t>`registerCustomer()`</t></si><si><t>トランザクション必須</t></si><si><t>`getBook()`</t></si><si><t>参照のみ、トランザクション不要</t></si><si><t>15.3 ロールバック条件</t></si><si><t>ロールバック契機</t></si><si><t>`OutOfStockException` スロー</t></si><si><t>自動ロールバック（RuntimeException）</t></si><si><t>`IllegalArgumentException` スロー</t></si><si><t>`PersistenceException` スロー</t></si><si><t>自動ロールバック</t></si><si><t>メソッド正常終了</t></si><si><t>コミット</t></si><si><t>15.4 トランザクション分離レベル</t></si><si><t>分離レベル</t></si><si><t>`READ_COMMITTED`</t></si><si><t>HSQLDBデフォルト</t></si><si><t>悲観的書き込みロック（在庫更新時）</t></si><si><t>`PESSIMISTIC_WRITE`</t></si><si><t>16. セキュリティ対策</t></si><si><t>16.1 認証セキュリティ</t></si><si><t>実装状況</t></si><si><t>パスワード暗号化</t></si><si><t>❌ 未実装</t></si><si><t>平文保存（学習用のため）</t></si><si><t>HTTPS通信</t></si><si><t>HTTP通信（開発環境）</t></si><si><t>セッション固定攻撃対策</t></si><si><t>✅ 実装済み</t></si><si><t>ログイン後にセッションID再生成（Payara標準機能）</t></si><si><t>セッションタイムアウト</t></si><si><t>16.2 Cookieセキュリティ</t></si><si><t>効果</t></si><si><t>JavaScriptからのCookieアクセスを禁止（XSS対策）</t></si><si><t>`false`</t></si><si><t>HTTP通信でもCookieを送信（開発環境用、本番では`true`にすべき）</t></si><si><t>16.3 SQLインジェクション対策</t></si><si><t>対策: JPA/JPQLによるパラメータバインディング</t></si><si><t>16.4 XSS対策</t></si><si><t>対策: JSFの自動エスケープ機能</t></si><si><t>16.5 CSRF対策</t></si><si><t>対策: JSFの自動CSRF保護機能（ViewStateトークン）</t></si><si><t>16.6 認可制御</t></si><si><t>対策: Servlet Filterによるアクセス制御</t></si><si><t>16.7 セキュリティ改善推奨事項（本番環境向け）</t></si><si><t>現状</t></si><si><t>推奨</t></si><si><t>パスワード保存</t></si><si><t>平文</t></si><si><t>bcrypt/PBKDF2などでハッシュ化</t></si><si><t>通信プロトコル</t></si><si><t>HTTP</t></si><si><t>HTTPS必須</t></si><si><t>Secure Cookie</t></si><si><t>true（HTTPS環境では必須）</t></si><si><t>用途に応じて調整（15-30分推奨）</t></si><si><t>アカウントロック</t></si><si><t>ログイン失敗N回でロック</t></si><si><t>監査ログ</t></si><si><t>ログイン・注文などの重要操作をログ記録</t></si><si><t>17. デプロイメント構成</t></si><si><t>17.1 システム構成図</t></si><si><t>┌─────────────────────────────────────────┐
│          クライアント（Webブラウザ）       │
│           Chrome / Edge / Firefox       │
└──────────────┬──────────────────────────┘
               │ HTTP (Port 8080)
               ▼
┌─────────────────────────────────────────┐
│         Payara Server 6                 │
│   ┌─────────────────────────────────┐   │
│   │  berry-books-mvc.war            │   │
│   │  (Webアプリケーション)            │   │
│   │  - JSF 4.0                      │   │
│   │  - JPA 3.1 (EclipseLink)        │   │
│   │  - CDI 4.0                      │   │
│   └──────────────┬──────────────────┘   │
│                  │ JNDI: jdbc/HsqldbDS  │
│   ┌──────────────▼──────────────────┐   │
│   │  Connection Pool: HsqldbPool    │   │
│   │  (JDBC Driver: org.hsqldb)      │   │
│   └──────────────┬──────────────────┘   │
└──────────────────┼──────────────────────┘
                   │ JDBC (Port 9001)
                   ▼
┌─────────────────────────────────────────┐
│         HSQLDB Server 2.7.x             │
│   Database: testdb                      │
│   TCP Server Mode (Port 9001)           │
└─────────────────────────────────────────┘</t></si><si><t>17.2 デプロイメント環境</t></si><si><t>OS</t></si><si><t>Windows 10 / Linux / macOS</t></si><si><t>OpenJDK 21</t></si><si><t>アプリケーションサーバー</t></si><si><t>Payara Server 6.x</t></si><si><t>データベース</t></si><si><t>HSQLDB 2.7.x (TCP Server Mode)</t></si><si><t>Gradle 8.x</t></si><si><t>17.3 デプロイ手順</t></si><si><t>17.3.1 初回セットアップ</t></si><si><t>[powershell]</t></si><si><t>17.3.2 更新デプロイ</t></si><si><t>17.3.3 アンデプロイ</t></si><si><t>17.4 アクセスURL</t></si><si><t>種別</t></si><si><t>URL</t></si><si><t>アプリケーショントップ</t></si><si><t>http://localhost:8080/berry-books-mvc</t></si><si><t>Payara管理コンソール</t></si><si><t>http://localhost:4848</t></si><si><t>17.5 ファイル配置</t></si><si><t>パス</t></si><si><t>WARファイル</t></si><si><t>`projects/berry-books-mvc/build/libs/berry-books-mvc.war`</t></si><si><t>デプロイ先</t></si><si><t>`payara6/glassfish/domains/domain1/applications/berry-books-mvc/`</t></si><si><t>ログファイル</t></si><si><t>`payara6/glassfish/domains/domain1/logs/server.log`</t></si><si><t>HSQLDBデータ</t></si><si><t>`hsqldb/data/testdb.*`</t></si><si><t>付録A: Gradleタスク一覧</t></si><si><t>タスク</t></si><si><t>`war`</t></si><si><t>WARファイルをビルド</t></si><si><t>`deploy`</t></si><si><t>Payara Serverにデプロイ</t></si><si><t>`undeploy`</t></si><si><t>Payara Serverからアンデプロイ</t></si><si><t>`setupHsqldb`</t></si><si><t>データベース初期化（テーブル作成＋データ投入）</t></si><si><t>付録B: 参考文献・リンク</t></si><si><t>Jakarta EE 10 Platform</t></si><si><t>https://jakarta.ee/specifications/platform/10/</t></si><si><t>Jakarta Server Faces 4.0</t></si><si><t>https://jakarta.ee/specifications/faces/4.0/</t></si><si><t>Jakarta Persistence 3.1</t></si><si><t>https://jakarta.ee/specifications/persistence/3.1/</t></si><si><t>Payara Server Documentation</t></si><si><t>https://docs.payara.fish/</t></si><si><t>HSQLDB Documentation</t></si><si><t>http://hsqldb.org/doc/2.0/guide/</t></si><si><t>DeliveryFeeServiceによる配送料金計算</t></si><si><t>基本ルール:</t></si><si><t>1. 購入金額が5000円以上の場合：送料無料</t></si><si><t>2. 購入金額が5000円未満の場合：</t></si><si><t>- 配送先が沖縄県の場合：1700円</t></si><si><t>- 上記以外の場合：800円（標準配送料）</t></si><si><t>都道府県判定:</t></si><si><t>- 配送先住所が「沖縄県」で始まる場合に沖縄県と判定</t></si><si><t>- AddressUtilによる都道府県名の検証を実施</t></si><si><t>- 47都道府県の正確な名称チェック</t></si><si><t>配送料金定数:</t></si><si><t>金額</t></si><si><t>標準配送料</t></si><si><t>800円</t></si><si><t>沖縄県配送料</t></si><si><t>1700円</t></si><si><t>5000円以上</t></si><si><t>cartView.xhtmlへリダイレクト</t><phoneticPr fontId="5"/></si><si><t>送料無料閾値</t><phoneticPr fontId="5"/></si><si><t>住所検証エラー</t></si><si><t>error.address.prefecture</t></si><si><t>エラーメッセージ</t></si><si><t>実施タイミング</t></si><si><t>顧客登録時、注文時の配送先住所入力時</t></si><si><t>検証仕様:</t></si><si><t>- AddressUtilクラスによる手動バリデーション</t></si><si><t>- 47都道府県の正式名称で始まるかをチェック</t></si><si><t>- 都道府県：北海道、東京都、京都府、大阪府、〇〇県（43県）</t></si><si><t>- 顧客登録時および注文時の配送先住所で実施</t></si><si><t># 1. データベーステーブルとデータを作成
.\gradlew :projects:java:berry-books-mvc:setupHsqldb

# 2. プロジェクトをビルド
.\gradlew :projects:java:berry-books-mvc:war

# 3. プロジェクトをデプロイ
.\gradlew :projects:java:berry-books-mvc:deploy</t><phoneticPr fontId="5"/></si><si><t># アプリケーションを再ビルドして再デプロイ
.\gradlew :projects:java:berry-books-mvc:war
.\gradlew :projects:java:berry-books-mvc:deploy</t><phoneticPr fontId="5"/></si><si><t># プロジェクトをアンデプロイ
.\gradlew :projects:java:berry-books-mvc:undeploy</t><phoneticPr fontId="5"/></si><si><t>Berry Books アプリケーション 詳細設計書</t><phoneticPr fontId="5"/></si><si><t>13.1 エラーメッセージ管理方式</t></si><si><t>typeMismatch.int</t></si><si><t>typeMismatch.java.time.LocalDate</t></si><si><t>error.customer.exists</t></si><si><t>error.email.not-exist</t></si><si><t>error.password.unmatch</t></si><si><t>error.cart.empty</t></si><si><t>error.order.outof-stock</t></si><si><t>error.order.optimistic-lock</t></si><si><t>メールアドレスを入力してください</t></si><si><t>有効なメールアドレスを入力してください</t></si><si><t>パスワードを入力してください</t></si><si><t>エラーが発生しました</t></si><si><t>顧客名を入力してください</t></si><si><t>顧客名は50文字以内で入力してください</t></si><si><t>メールアドレスは100文字以内で入力してください</t></si><si><t>パスワードは8文字以上20文字以内で入力してください</t></si><si><t>住所は200文字以内で入力してください</t></si><si><t>住所は正しい都道府県名で始まる必要があります</t></si><si><t>登録中にエラーが発生しました</t></si><si><t>このメールアドレスは既に登録されています</t></si><si><t>配送先住所を入力してください</t></si><si><t>配送先住所は200文字以内で入力してください</t></si><si><t>配送先住所は正しい都道府県名で始まる必要があります</t></si><si><t>決済方法を選択してください</t></si><si><t xml:space="preserve">在庫不足: </t></si><si><t xml:space="preserve">注文処理中にエラーが発生しました: </t></si><si><t xml:space="preserve">Book not found: </t></si><si><t xml:space="preserve">OrderTran not found for ID: </t></si><si><t xml:space="preserve">OrderDetail not found for PK: </t></si><si><t>使用箇所</t></si><si><t>LoginBean.processLogin()</t></si><si><t>表示方法</t></si><si><t>FacesMessage（ERROR）</t></si><si><t>発生条件:</t></si><si><t>OrderBean.placeOrder()</t></si><si><t>OutOfStockException</t></si><si><t>java.lang.RuntimeException
    ├── pro.kensait.berrybooks.service.order.OutOfStockException
    └── pro.kensait.berrybooks.service.customer.EmailAlreadyExistsException

jakarta.persistence.OptimisticLockException
    └── （JPAが自動的にスロー：楽観的ロック競合時）</t></si><si><t>パッケージ: pro.kensait.berrybooks.service.order</t></si><si><t>継承元: RuntimeException</t></si><si><t>・注文確定時に注文数が在庫数を超えた場合</t></si><si><t>・在庫数 - 注文数 &lt; 0 となる場合</t></si><si><t>スロー箇所:</t></si><si><t>・OrderService.orderBooks()メソッド内</t></si><si><t>・在庫チェックロジックで在庫不足を検出時</t></si><si><t>キャッチ箇所:</t></si><si><t>・OrderBean.placeOrder()メソッド</t></si><si><t>・catch節でエラーメッセージを構築し、Flash Scopeに設定</t></si><si><t>・orderError.xhtmlへリダイレクト</t></si><si><t>14.2.2 EmailAlreadyExistsException（メールアドレス重複例外）</t></si><si><t>パッケージ: pro.kensait.berrybooks.service.customer</t></si><si><t>・新規顧客登録時に、既に登録済みのメールアドレスを入力した場合</t></si><si><t>・CustomerDao.findByEmail()で既存顧客が見つかった場合</t></si><si><t>・CustomerService.registerCustomer()メソッド内</t></si><si><t>・メールアドレス重複チェックで既存顧客を検出時</t></si><si><t>・CustomerBean.register()メソッド</t></si><si><t>・catch節でエラーメッセージを表示</t></si><si><t>・入力画面（customerInput.xhtml）に留まる</t></si><si><t>OptimisticLockException</t></si><si><t>PersistenceException</t></si><si><t>RuntimeException</t></si><si><t>Exception</t></si><si><t>その他の予期しないエラー</t></si><si><t>14.3.1 OptimisticLockException詳細</t></si><si><t>発生メカニズム:</t></si><si><t>1. カート追加時にStockエンティティのVERSION値を取得し、CartItemに保存</t></si><si><t>2. 注文確定時に、保存されていたVERSION値でStockエンティティを更新</t></si><si><t>3. JPAの@Versionアノテーションにより、UPDATE時に自動的にバージョンチェック</t></si><si><t>4. WHERE BOOK_ID = ? AND VERSION = ? というSQL条件が自動付加</t></si><si><t>5. バージョン不一致の場合、JPAがOptimisticLockExceptionをスロー</t></si><si><t>ハンドリング:</t></si><si><t>・OrderBean.placeOrder()メソッドでキャッチ</t></si><si><t>14.3.2 データ検索時のエラーハンドリング</t></si><si><t>実装方針:</t></si><si><t>・OrderTranDao.findById()などで、データが見つからない場合にRuntimeExceptionをスロー</t></si><si><t>・呼び出し元でキャッチして適切にハンドリング</t></si><si><t>14.4.1 注文処理における例外処理フロー（OutOfStockException）</t></si><si><t>14.4.2 顧客登録における例外処理フロー（EmailAlreadyExistsException）</t></si><si><t>14.4.3 楽観的ロック競合の例外処理フロー（OptimisticLockException）</t></si><si><t>13.2.4 都道府県チェック仕様</t><phoneticPr fontId="5"/></si><si><t>現時点では外部システムとのシステム間連携はない。</t><rPh sb="17" eb="18"><t>カン</t></rPh><phoneticPr fontId="5"/></si><si><t>pro.kensait.berrybooks/
├── entity/                    # JPAエンティティ（ドメインモデル）
│   ├── Book.java             # 書籍エンティティ
│   ├── Category.java         # カテゴリエンティティ
│   ├── Publisher.java        # 出版社エンティティ
│   ├── Stock.java            # 在庫エンティティ
│   ├── Customer.java         # 顧客エンティティ
│   ├── OrderTran.java        # 注文取引エンティティ
│   ├── OrderDetail.java      # 注文明細エンティティ
│   └── OrderDetailPK.java    # 注文明細複合主キー
│
├── dao/                       # データアクセス層
│   ├── BookDao.java          # 書籍DAO
│   ├── CategoryDao.java      # カテゴリDAO
│   ├── CustomerDao.java      # 顧客DAO
│   ├── StockDao.java         # 在庫DAO
│   ├── OrderTranDao.java     # 注文取引DAO
│   └── OrderDetailDao.java   # 注文明細DAO
│
├── service/                   # ビジネスロジック層
│   ├── book/
│   │   └── BookService.java  # 書籍サービス
│   ├── category/
│   │   └── CategoryService.java # カテゴリサービス
│   ├── customer/
│   │   └── CustomerService.java # 顧客サービス
│   ├── delivery/
│   │   └── DeliveryFeeService.java # 配送料金サービス
│   └── order/
│       ├── OrderService.java      # 注文サービス
│       ├── OrderServiceIF.java    # 注文サービスIF
│       ├── OrderTO.java           # 注文転送オブジェクト
│       ├── OrderHistoryTO.java    # 注文履歴TO
│       ├── OrderSummaryTO.java    # 注文サマリTO
│       └── OutOfStockException.java # 在庫不足例外
│
├── common/                    # 共通ユーティリティ・定数
│   ├── MessageUtil.java       # メッセージ取得ユーティリティ
│   └── SettlementType.java    # 決済方法Enum（定数化）
│
├── util/                      # ユーティリティ
│   └── AddressUtil.java       # 住所関連ユーティリティ
│
└── web/                       # Web層（Managed Bean）
    ├── login/
    │   └── LoginBean.java     # ログイン管理Bean
    ├── customer/
    │   └── CustomerBean.java  # 顧客情報Bean
    ├── book/
    │   ├── BookSearchBean.java # 書籍検索Bean
    │   └── SearchParam.java    # 検索パラメータ
    ├── cart/
    │   ├── CartBean.java       # カート操作Bean
    │   ├── CartSession.java    # カートセッション
    │   └── CartItem.java       # カートアイテム
    ├── order/
    │   └── OrderBean.java      # 注文処理Bean
    └── filter/
        └── AuthenticationFilter.java # 認証フィルター</t><phoneticPr fontId="5"/></si><si><t xml:space="preserve"> Enum値 </t><phoneticPr fontId="5"/></si><si><t xml:space="preserve"> コード </t></si><si><t xml:space="preserve"> 表示名 </t></si><si><t xml:space="preserve"> `BANK_TRANSFER` </t><phoneticPr fontId="5"/></si><si><t xml:space="preserve"> 銀行振り込み </t></si><si><t xml:space="preserve"> `CREDIT_CARD` </t><phoneticPr fontId="5"/></si><si><t xml:space="preserve"> クレジットカード </t></si><si><t xml:space="preserve"> `CASH_ON_DELIVERY` </t><phoneticPr fontId="5"/></si><si><t xml:space="preserve"> 着払い </t></si><si><t>12.1 決済方法コード</t><phoneticPr fontId="5"/></si><si><t>主要メソッド:</t><phoneticPr fontId="5"/></si><si><t>- `getCode()`: 決済方法コードを取得</t></si><si><t>- `getDisplayName()`: 表示名を取得</t></si><si><t>- `fromCode(Integer code)`: コードからEnum値に変換</t></si><si><t>- `getDisplayNameByCode(Integer code)`: コードから表示名を取得（nullセーフ）</t></si><si><r><t>実装方式:</t></r><r><rPr><sz val="11"/><rFont val="BIZ UDゴシック"/><family val="3"/><charset val="128"/></rPr><t xml:space="preserve"> Enumクラスによる定数管理（`pro.kensait.berrybooks.common.SettlementType`）</t></r><phoneticPr fontId="5"/></si><si><r><t>データベース保存形式:</t></r><r><rPr><sz val="11"/><rFont val="BIZ UDゴシック"/><family val="3"/><charset val="128"/></rPr><t xml:space="preserve"> INTEGER型（1, 2, 3）</t></r><phoneticPr fontId="5"/></si><si><t xml:space="preserve">項目 </t><phoneticPr fontId="5"/></si><si><t xml:space="preserve">標準配送料 </t><phoneticPr fontId="5"/></si><si><t xml:space="preserve">沖縄県配送料 </t><phoneticPr fontId="5"/></si><si><t xml:space="preserve">送料無料閾値 </t><phoneticPr fontId="5"/></si><si><t xml:space="preserve">値 </t><phoneticPr fontId="5"/></si><si><t xml:space="preserve">800円 </t><phoneticPr fontId="5"/></si><si><t xml:space="preserve">1700円 </t><phoneticPr fontId="5"/></si><si><t xml:space="preserve">5000円以上 </t><phoneticPr fontId="5"/></si><si><t>12.2 配送料金計算ロジック定数</t><phoneticPr fontId="5"/></si><si><t>管理方式: プロパティファイル（messages.properties）で一元管理</t></si><si><t>実装クラス: MessageUtil（pro.kensait.berrybooks.common）</t></si><si><t>プロパティファイル</t></si><si><t>src/main/resources/messages.properties</t></si><si><t>取得方法</t></si><si><t>MessageUtil.get("error.xxx")</t></si><si><t>国際化対応</t></si><si><t>messages_en.properties など追加可能</t></si><si><t>13.2 エラーメッセージ一覧</t></si><si><t>13.2.1 型変換エラー</t></si><si><t>13.2.2 共通エラー</t></si><si><t>error.email.required</t></si><si><t>error.email.invalid</t></si><si><t>error.password.required</t></si><si><t>error.general</t></si><si><t>13.2.3 顧客登録関連エラー</t></si><si><t>error.customer.name.required</t></si><si><t>error.customer.name.max-length</t></si><si><t>error.email.max-length</t></si><si><t>error.password.length</t></si><si><t>error.birthday.format</t></si><si><t>error.birthday.parse-error</t></si><si><t>error.address.max-length</t></si><si><t>error.address.invalid-prefecture</t></si><si><t>error.registration</t></si><si><t>error.email.already-exists</t></si><si><t>13.2.4 ログイン関連エラー</t></si><si><t>error.login.failed</t></si><si><t>error.login.invalid-credentials</t></si><si><t>13.2.5 カート・注文関連エラー</t></si><si><t>error.delivery-address.required</t></si><si><t>error.delivery-address.max-length</t></si><si><t>error.delivery-address.invalid-prefecture</t></si><si><t>error.settlement-type.required</t></si><si><t>error.out-of-stock.message</t></si><si><t>error.out-of-stock</t></si><si><t>error.optimistic-lock</t></si><si><t>error.order-processing</t></si><si><t>13.2.6 データ検索エラー</t></si><si><t>error.book.not-found</t></si><si><t>error.order-tran.not-found</t></si><si><t>error.order-detail.not-found</t></si><si><t>13.2.7 既存メッセージ（後方互換性維持）</t></si><si><t>13.3 画面表示メッセージとハンドリング</t></si><si><t>13.3.1 ログイン失敗</t></si><si><t>error.login.failed / error.login.invalid-credentials</t></si><si><t>発生条件: メールアドレス不存在、またはパスワード不一致</t></si><si><t>13.3.2 在庫不足エラー</t></si><si><t>発生条件: 注文数が在庫数を超える場合</t></si><si><t>13.3.3 楽観的ロック競合エラー</t></si><si><t>発生条件: カート追加後に他ユーザーが在庫を更新</t></si><si><t>アプリケーションでは、業務例外以外にJakarta EEやJPAが提供するシステムレベルの例外も適切にハンドリングします。</t></si><si><t>パッケージ</t></si><si><t>jakarta.persistence</t></si><si><t>java.lang</t></si><si><t>・エラーメッセージ（error.optimistic-lock）をFlash Scopeに設定</t></si><si><t>Service層では、データが見つからない場合にRuntimeExceptionをスローします。</t></si><si><t>・エラーメッセージ（error.order-tran.not-foundなど）に該当IDを付加</t></si><si><t>┌─────────────────────────────┐
│  OrderBean.placeOrder()     │
│  (Managed Bean層)           │
└──────────┬──────────────────┘
           │ try {
           │ OrderTO作成
           ▼
┌─────────────────────────────┐
│  OrderService.orderBooks()  │
│  (Service層)                │
│  @Transactional             │
└──────────┬──────────────────┘
           │
           │ 在庫チェック開始
           ▼
┌─────────────────────────────┐
│  for each CartItem:         │
│    在庫数 - 注文数を計算     │
└──────────┬──────────────────┘
           │
           ├─ [在庫不足] ──────────────┐
           │                           │
           │  throw OutOfStockException│
           │  (bookId, bookName,       │
           │   message)                │
           │                           │
           └─ [在庫OK] ─────┐          │
                            │          │
                            ▼          │
              ┌─────────────────────┐ │
              │  在庫減算処理        │ │
              │  OrderTran永続化    │ │
              │  OrderDetail永続化  │ │
              └─────────┬───────────┘ │
                        │              │
                        │              │
           ┌────────────┴──────────────┘
           │
           ▼
┌─────────────────────────────┐
│  OrderBean.placeOrder()     │
│  } catch (OutOfStockExcep   │
│  tion e) {                  │
└──────────┬──────────────────┘
           │
           │ errorMessage = 
           │ MessageUtil.get(
           │   "error.out-of-stock")
           │   + bookName
           │ setFlashErrorMessage()
           │
           ▼
┌─────────────────────────────┐
│  orderError.xhtml           │
│  (エラー画面)                │
│  Flash Scopeから             │
│  エラーメッセージ表示        │
└─────────────────────────────┘</t></si><si><t>┌─────────────────────────────┐
│  CustomerBean.register()    │
│  (Managed Bean層)           │
└──────────┬──────────────────┘
           │ try {
           │ Customerエンティティ作成
           │ 住所検証（AddressUtil）
           ▼
┌─────────────────────────────┐
│  CustomerService.           │
│  registerCustomer()         │
│  (Service層)                │
│  @Transactional             │
└──────────┬──────────────────┘
           │
           │ メールアドレス重複チェック
           ▼
┌─────────────────────────────┐
│  CustomerDao.findByEmail()  │
└──────────┬──────────────────┘
           │
           ├─ [重複あり] ──────────────┐
           │                           │
           │  throw EmailAlready       │
           │  ExistsException          │
           │  (email, message)         │
           │                           │
           └─ [重複なし] ───┐          │
                            │          │
                            ▼          │
              ┌─────────────────────┐ │
              │  customerDao.       │ │
              │  register(customer) │ │
              └─────────┬───────────┘ │
                        │              │
                        │              │
           ┌────────────┴──────────────┘
           │
           ▼
┌─────────────────────────────┐
│  CustomerBean.register()    │
│  } catch (EmailAlready      │
│  ExistsException e) {       │
└──────────┬──────────────────┘
           │
           │ addErrorMessage(
           │   MessageUtil.get(
           │     "error.email.already-
           │      exists"))
           │ return null;
           │ ※画面遷移しない
           ▼
┌─────────────────────────────┐
│  customerInput.xhtml        │
│  (入力画面に留まる)          │
│  FacesMessageで              │
│  エラーメッセージ表示        │
└─────────────────────────────┘</t></si><si><t>┌─────────────────────────────┐
│  OrderBean.placeOrder()     │
│  (Managed Bean層)           │
└──────────┬──────────────────┘
           │ try {
           ▼
┌─────────────────────────────┐
│  OrderService.orderBooks()  │
│  @Transactional             │
└──────────┬──────────────────┘
           │
           │ カート追加時点のVERSION値を
           │ CartItemから取得
           ▼
┌─────────────────────────────┐
│  Stock stock = new Stock()  │
│  stock.setBookId(...)       │
│  stock.setVersion(          │
│    cartItem.getVersion())   │
│  ※カート追加時点のVERSION    │
└──────────┬──────────────────┘
           │
           │ 在庫更新実行
           ▼
┌─────────────────────────────┐
│  stockDao.update(stock)     │
│  ※JPAが自動的に             │
│  WHERE VERSION = ? を付加    │
└──────────┬──────────────────┘
           │
           ├─ [VERSION不一致] ─────────┐
           │                           │
           │  JPAがOptimisticLock      │
           │  Exceptionをスロー        │
           │                           │
           └─ [VERSION一致] ─┐         │
                             │         │
                             ▼         │
               ┌───────────────────┐   │
               │  在庫更新成功      │   │
               │  VERSION自動増分   │   │
               └─────────┬─────────┘   │
                         │             │
           ┌─────────────┴─────────────┘
           │
           ▼
┌─────────────────────────────┐
│  OrderBean.placeOrder()     │
│  } catch (OptimisticLock    │
│  Exception e) {             │
└──────────┬──────────────────┘
           │
           │ errorMessage = 
           │ MessageUtil.get(
           │   "error.optimistic-lock")
           │ setFlashErrorMessage()
           │
           ▼
┌─────────────────────────────┐
│  orderError.xhtml           │
│  (エラー画面)                │
│  「他のユーザーが同時に      │
│   注文しました」表示        │
└─────────────────────────────┘</t></si><si><t>項目</t><phoneticPr fontId="5"/></si><si><t xml:space="preserve"> フィールド名 </t><phoneticPr fontId="5"/></si><si><t xml:space="preserve">`cartItems` </t><phoneticPr fontId="5"/></si><si><t xml:space="preserve">`totalPrice` </t><phoneticPr fontId="5"/></si><si><t xml:space="preserve">`deliveryPrice` </t><phoneticPr fontId="5"/></si><si><t xml:space="preserve">`deliveryAddress` </t><phoneticPr fontId="5"/></si><si><t xml:space="preserve">`settlementType` </t><phoneticPr fontId="5"/></si><si><t>決済方法コード（`SettlementType`：1=銀行振り込み、2=クレジットカード、3=着払い）</t><phoneticPr fontId="5"/></si><si><t>生年月日はyyyy-MM-dd形式で入力してください（例：1990-01-15）</t><phoneticPr fontId="5"/></si><si><t>生年月日の形式が正しくありません（例：1990-01-15）</t><phoneticPr fontId="5"/></si><si><t>他のユーザーが同時に注文しました。もう一度お試しください</t><phoneticPr fontId="5"/></si><si><t>DB接続エラー、SQL実行エラー、制約違反</t><phoneticPr fontId="5"/></si><si><t>データが見つからない（書籍、注文、顧客など）</t><phoneticPr fontId="5"/></si><si><t>楽観的ロック競合（在庫更新時にVERSION不一致）</t><phoneticPr fontId="5"/></si><si><t>トランザクション自動ロールバック、画面でエラーメッセージ表示</t><phoneticPr fontId="5"/></si><si><t>ServiceでRuntimeExceptionスロー、Managed Beanでキャッチ</t><phoneticPr fontId="5"/></si><si><t>OrderBean.placeOrder()の最後のcatch節でキャッチし、一般エラーメッセージ表示</t><phoneticPr fontId="5"/></si><si><t>OrderBean.placeOrder()でキャッチ、トランザクションロールバック、再試行促進メッセージ表示</t><phoneticPr fontId="5"/></si><si><t>すべてRuntimeExceptionを継承しており、チェック例外ではなく非チェック例外として実装。</t><phoneticPr fontId="5"/></si><si><t>Berry Booksでは、ビジネスロジックレベルのエラーを表現するために、以下の業務例外を定義。</t><phoneticPr fontId="5"/></si><si><t>┌────────────────────┐
│ OrderBean          │
│ placeOrder()       │
└─────┬──────────────┘
      │ OrderTO作成
      ▼
┌────────────────────┐
│ OrderService       │
│ orderBooks()       │
└─────┬──────────────┘
      │
      ▼
┌─────────────────────────────────────┐
│ ①在庫チェック＆減算（悲観的ロック）    │
│   for each CartItem:                │
│     Stock stock = stockDao.         │
│       findByIdWithLock(bookId)      │
│     // 在庫チェック                 │
｜     if (stock.quantity &lt; count)     │
│       throw OutOfStockException     │
│     stock.quantity -= count         │
└─────┬───────────────────────────────┘
      │
      ▼
┌─────────────────────────────────────┐
│ ②OrderTran作成＆永続化              │
│   OrderTran orderTran = new ...    │
│   orderTranDao.persist(orderTran)  │
│   em.flush() // IDを確定            │
└─────┬───────────────────────────────┘
      │
      ▼
┌─────────────────────────────────────┐
│ ③OrderDetail作成＆永続化             │
│   for each CartItem:                │
│     OrderDetail detail = new ...   │
│     orderDetailDao.persist(detail) │
└─────┬───────────────────────────────┘
      │
      ▼
┌─────────────────────────────────────┐
│ ④明細を含めて再取得＆返却            │
│   return orderTranDao.              │
│     findByIdWithDetails(id)         │
└─────────────────────────────────────┘</t><phoneticPr fontId="5"/></si><si><t>8.3.3 在庫チェックロジック詳細</t><phoneticPr fontId="5"/></si><si><t>チェック条件:</t><phoneticPr fontId="5"/></si><si><t>処理フロー:</t><phoneticPr fontId="5"/></si><si><t>1. 在庫情報取得</t></si><si><t>2. 在庫数の比較</t></si><si><t>3. 在庫不足時の処理</t></si><si><t>4. 在庫充分時の処理</t></si><si><t>実装上の注意点:</t></si><si><t>   - StockDaoから書籍IDで在庫情報を取得</t></si><si><t>   - `Stock current = stockDao.findById(bookId)`</t></si><si><t>   - 在庫数（`current.quantity`）と注文数（`count`）を比較</t></si><si><t>   - 条件式：`if (current.quantity &lt; count)`</t></si><si><t>   - `OutOfStockException`をスロー</t></si><si><t>   - 例外には書籍ID、書籍名、エラーメッセージを含める</t></si><si><t>   - トランザクションは自動的にロールバック</t></si><si><t>   - 在庫減算処理に進む</t></si><si><t>   - 残り在庫数を計算：`remaining = current.quantity - count`</t></si><si><t>   - Stockエンティティを更新</t></si><si><t>- 在庫チェックは必ずトランザクション内で実行</t></si><si><t>- チェックと更新の間に他のトランザクションが介入する可能性を考慮</t></si><si><t>- 楽観的ロック（VERSION）により、他のユーザーによる更新を検出</t></si><si><t>- 在庫不足時は以降の処理（注文登録）を実行せず、即座に例外をスロー</t></si><si><r><t>チェックタイミング:</t></r><r><rPr><sz val="11"/><rFont val="BIZ UDゴシック"/><family val="3"/><charset val="128"/></rPr><t xml:space="preserve"> 注文確定時（OrderService.orderBooks()内）</t></r><phoneticPr fontId="5"/></si><si><t>- 現在の在庫数 &lt; 注文数 の場合に在庫不足と判定</t></si><si><t>- カート内の全商品に対してループ処理で順次チェック</t></si></sst>