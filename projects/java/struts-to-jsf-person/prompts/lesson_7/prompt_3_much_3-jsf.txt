===============================================
Jakarta EE 10 マイグレーション【高：詳細版】
フェーズ3: プレゼンテーション層のJSF化
===============================================

struts-to-jsf-personプロジェクトのプレゼンテーション層を、StrutsからJSFに移行してください。

## 現状分析

### 現在のプレゼンテーション層の問題

- Strutsの`Action`クラス（PersonListAction等）でリクエスト処理
- `ActionForm`でフォームデータ保持（全フィールドがString）
- `request.setAttribute()`でスコープにデータ設定
- `mapping.findForward()`で画面遷移
- JNDIルックアップでServiceを取得

---

## マイグレーション内容

### 1. PersonTableBean（一覧画面用）の作成

**新規作成：** `pro.kensait.jsf.person.PersonTableBean`

**役割：** `PersonListAction`の置き換え

**クラス設計：**
- `@Named("personTable")` - EL式でのアクセス名
- `@ViewScoped` - 画面表示中のスコープ
- `implements Serializable` - ViewScoped必須要件

**プロパティ：**
- `List<Person> personList` - 一覧表示データ

**依存性注入：**
- `@Inject PersonService personService`

**主要メソッド：**
- `@PostConstruct void postConstruct()` - 初期化、データ取得
- `String removePerson(Integer personId)` - 削除処理、自画面リロード
- `String editPerson(Integer personId)` - Flash Scopeにデータ設定、入力画面へ遷移

---

### 2. PersonInputBean（入力画面用）の作成

**新規作成：** `pro.kensait.jsf.person.PersonInputBean`

**役割：** `PersonInputAction`と`PersonForm`の統合置き換え

**クラス設計：**
- `@Named("personInput")`
- `@ViewScoped`
- `implements Serializable`

**プロパティ（画面入力項目）：**
- `Integer personId` - 編集時のID
- `String personName` - 名前
- `Integer age` - 年齢（Integerに型変更）
- `String gender` - 性別

**依存性注入：**
- `@Inject PersonService personService`

**主要メソッド：**
- `@PostConstruct void postConstruct()` - Flash Scopeから編集データ取得
- `String confirm()` - Personオブジェクト生成、Flash Scopeに設定、確認画面へ
- `String cancel()` - 一覧画面へ戻る

---

### 3. PersonUpdateBean（更新処理用）の作成

**新規作成：** `pro.kensait.jsf.person.PersonUpdateBean`

**役割：** `PersonUpdateAction`と`PersonConfirmAction`の統合置き換え

**クラス設計：**
- `@Named("personUpdate")`
- `@ViewScoped`
- `implements Serializable`

**プロパティ：**
- `Person person` - 登録/更新対象データ

**依存性注入：**
- `@Inject PersonService personService`

**主要メソッド：**
- `@PostConstruct void postConstruct()` - Flash Scopeからデータ取得
- `String register()` - 新規/更新判定、Service呼び出し、リダイレクト
- `String back()` - Flash Scopeに再設定、入力画面へ戻る

---

### 4. 削除するクラス

**削除対象：**
- `action/PersonListAction.java`
- `action/PersonInputAction.java`
- `action/PersonConfirmAction.java`
- `action/PersonUpdateAction.java`
- `action/PersonDeleteAction.java`
- `form/PersonForm.java`

---

## 変更後の構造

```
pro.kensait.jsf.person/
├── Person.java              # JPAエンティティ
├── PersonService.java       # CDI Service
├── PersonTableBean.java     # 一覧画面バッキングBean
├── PersonInputBean.java     # 入力画面バッキングBean
└── PersonUpdateBean.java    # 更新処理バッキングBean
```

---

## 注意事項

### スコープ選択
- `@ViewScoped` - 画面単位でのデータ保持、Ajax対応
- `@SessionScoped` - セッション全体でのデータ保持
- 今回はViewScopedが適切

### Flash Scope
- 画面間でのデータ受け渡しに使用
- リダイレクト後も一度だけ有効
- `flash.put(key, value)`と`flash.get(key)`

### 画面遷移
- アクションメソッドは遷移先ビューID（拡張子なし）を返す
- リダイレクトは`"viewId?faces-redirect=true"`

### 型変換
- ActionFormのString → 適切な型（Integer等）
- JSFが自動で型変換処理

### 依存性注入
- JNDIルックアップ不要
- `@Inject`でServiceを注入

