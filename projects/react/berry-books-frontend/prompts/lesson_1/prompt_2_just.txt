===============================================
React実装プロンプト【中：適切版】
===============================================

Berry Books オンライン書店の管理者画面を、React + TypeScriptで実装してください。

## 技術スタック
- React 18
- TypeScript 5
- Vite 5

---

## 実装内容

### 1. 型定義
APIのデータ構造に対応する型を定義してください。

- 顧客情報と統計情報を表す型
- 顧客情報更新用のリクエスト型

### 2. REST API連携
API仕様は`../java/berry-books-rest/spec/openapi.yaml`を参照してください。

- 顧客一覧を取得するAPI
- 顧客情報を更新するAPI

### 3. 顧客一覧コンポーネント

#### 状態管理
- 顧客リスト
- ローディング状態
- エラー状態
- 編集中の顧客
- フォーム入力データ

#### 機能
- マウント時に顧客一覧を取得
- テーブル形式で顧客情報を表示（ID、名前、メール、生年月日、住所、注文統計）
- 編集ボタンでダイアログを表示
- ダイアログ内でフォーム入力
- 保存時にAPIで更新し一覧を再取得

### 4. メインアプリ
- ヘッダー（Berry Books Admin Dashboard）
- 顧客一覧コンポーネントを配置

### 5. デザイン
#### テーマ
- プライマリカラー: #CF3F4E（ストロベリーレッド）
- グラデーション背景

#### スタイル
- ヘッダー: グラデーション、白文字
- テーブル: ストライプ、ホバー効果
- ボタン: 編集（レッド系）、保存（グリーン系）、キャンセル（グレー系）
- ダイアログ: オーバーレイ、中央配置、シャドウ効果

### 6. Vite設定
フロントエンドの開発サーバー（Vite）から、バックエンドAPI（Payara on http://localhost:8080）を呼び出せるように設定してください。
具体的には、`/berry-books-rest`へのリクエストを`http://localhost:8080`に転送する設定が必要です。

---

## 注意事項
- TypeScript strictモード
- Functional ComponentとHooks使用
- Controlled componentでフォーム管理
- エラーハンドリング（try-catch、HTTPステータスチェック）

