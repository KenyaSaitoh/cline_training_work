===============================================
React実装プロンプト【高：詳細版】
===============================================

Berry Books オンライン書店の管理者画面を、React + TypeScriptで実装してください。

## 1. プロジェクト構成

主要なファイル構成：
- components/CustomerList.tsx - 顧客一覧コンポーネント
- styles/App.css - Berry Booksテーマスタイル
- types.ts - TypeScript型定義
- App.tsx - メインアプリコンポーネント
- main.tsx - エントリーポイント

---

## 2. 型定義（types.ts）

### 顧客情報と統計情報の型
顧客の基本情報（ID、名前、メール、生年月日、住所）と統計情報（注文件数、購入冊数合計）を含む型を定義してください。

API仕様参照: `../java/berry-books-rest/spec/openapi.yaml` - `CustomerStatsTO`

### 顧客情報更新リクエストの型
顧客情報更新時のリクエストボディ型（customerIdを除く4項目）を定義してください。

API仕様参照: `../java/berry-books-rest/spec/openapi.yaml` - `CustomerTO`

---

## 3. REST API連携

### 顧客一覧取得API
エンドポイント: `GET /berry-books-rest/customers/`

処理フロー:
- GETリクエストでデータ取得
- レスポンスステータスコードをチェック
- JSONパースして状態を更新

エラーハンドリング:
- ネットワークエラーをtry-catchで捕捉
- HTTPエラーをresponse.okでチェック
- エラー時はエラー状態にメッセージを設定

API仕様参照: `../java/berry-books-rest/spec/openapi.yaml` - `GET /customers/`

### 顧客情報更新API
エンドポイント: `PUT /berry-books-rest/customers/{customerId}`

処理フロー:
- PUTリクエストでデータ送信（Content-Type: application/json）
- リクエストボディに更新データをJSON化して送信
- 成功時は顧客一覧を再取得してダイアログを閉じる

エラーハンドリング:
- ネットワークエラーをtry-catchで捕捉
- HTTPエラー時はアラートで通知

API仕様参照: `../java/berry-books-rest/spec/openapi.yaml` - `PUT /customers/{customerId}`

---

## 4. CustomerListコンポーネント（components/CustomerList.tsx）

### 状態管理
以下の状態を管理してください：
- 顧客リスト（初期値: 空配列）
- ローディング状態（初期値: true）
- エラーメッセージ（初期値: null）
- 編集中の顧客（初期値: null）
- 編集フォームの入力データ

### データ取得
コンポーネントマウント時にuseEffectで顧客一覧を取得してください。

### 編集機能
#### 編集ボタンクリック時
- 編集中の顧客を設定
- フォームデータを初期化（顧客名、メール、生年月日、住所）

#### フォーム入力変更時
- イベントハンドラーでフォームデータを更新

#### 保存ボタンクリック時
- 更新APIにPUTリクエスト送信
- 成功時は一覧を再取得してダイアログを閉じる
- 失敗時はアラートで通知

#### キャンセルボタンクリック時
- 編集中の顧客をクリア

### レンダリング
#### ローディング状態
ローディング中は「読み込み中...」を表示

#### エラー状態
エラー時はエラーメッセージを表示

#### 顧客一覧テーブル
- ヘッダー行: ID、顧客名、メール、生年月日、住所、注文件数、購入冊数、操作
- データ行: 各顧客情報を表示（mapで展開）、編集ボタンを配置

#### 編集ダイアログ（モーダル）
編集中の顧客がnullでない場合に表示：
- 半透明のオーバーレイ
- 中央配置のダイアログボックス
- タイトル「顧客情報編集」
- フォーム（顧客名、メールアドレス、生年月日、住所）
- 保存ボタンとキャンセルボタン

---

## 5. Appコンポーネント（App.tsx）

### 構造
#### ヘッダー
- サイト名「Berry Books」
- サブタイトル「Admin Dashboard」

#### メインコンテンツ
- CustomerListコンポーネントを配置

---

## 6. デザイン仕様（styles/App.css）

### テーマカラー
- プライマリカラー: #CF3F4E（ストロベリーレッド）
- セカンダリカラー: #D8596C（明るめのレッド）
- 背景グラデーション: #f8e7e9から#ffffffへ
- ヘッダーグラデーション: #CF3F4Eから#D8596Cへ

### 全体レイアウト
- body: グラデーション背景、min-height 100vh
- コンテナ: 中央配置、最大幅1200px、白背景、シャドウ効果、角丸

### ヘッダー
- グラデーション背景、白文字、中央配置、シャドウ効果
- サイト名を大きく表示

### テーブル
- 全幅、ボーダー折りたたみ
- ヘッダー: 明るい背景、プライマリカラーのボーダー
- データセル: 適度なパディング、ボーダー
- 奇数行に背景色
- ホバー時に背景色変更

### ボタン
- 基本スタイル: パディング、ボーダーなし、角丸、カーソルpointer、トランジション効果
- 編集ボタン: プライマリカラー背景、白文字、ホバー時に明るく
- 保存ボタン: グリーン背景、白文字、ホバー時に明るく
- キャンセルボタン: グレー背景、白文字、ホバー時に明るく

### ダイアログ（モーダル）
- オーバーレイ: fixed配置、全画面、半透明黒背景、flex中央配置、z-index高め
- ダイアログボックス: 白背景、パディング、角丸、シャドウ効果、最大幅500px
- フォーム: 縦並び、適度なマージン
- ラベル: ブロック表示、マージン、太字
- 入力フィールド: 全幅、パディング、ボーダー、角丸
- ボタングループ: flex配置、右寄せ、適度な間隔

### ローディング・エラー表示
- ローディング: 中央配置、適度なパディング、グレー文字
- エラー: 中央配置、適度なパディング、プライマリカラー文字

---

## 7. Vite設定（vite.config.ts）

### バックエンドAPI連携設定
フロントエンドの開発サーバー（Vite、ポート3000）から、バックエンドAPI（Payara on http://localhost:8080）を呼び出せるようにするため、以下の設定を追加してください：
- `/berry-books-rest`へのリクエストを`http://localhost:8080`に転送
- changeOriginを有効化（CORSエラー回避のため）

---

## 8. エントリーポイント（main.tsx）

### 基本構造
- ReactDOM.createRootでルート要素を作成
- Appコンポーネントをレンダリング
- StrictModeで囲む

---

## 9. 実装上の注意事項

### TypeScript
- strict: trueで型チェック厳密化
- 型ガード（response.okチェック等）の実装
- 型アサーション（as）は最小限に

### React Hooks
- useStateで状態管理
- useEffectでデータ取得（依存配列に注意）
- 不要な再レンダリングを避ける

### fetch API
- async/awaitで非同期処理
- try-catchでエラーハンドリング
- response.okでHTTPステータスチェック
- JSON.stringify/JSON.parseで型変換

### フォーム
- controlled component（valueとonChangeを必ず設定）

### スタイリング
- 意味のあるクラス名を使用
- ホバー効果やトランジションで良いUX

---

## 10. API仕様参照

OpenAPI Specification: `../java/berry-books-rest/spec/openapi.yaml`

主要参照箇所:
- `/customers/` エンドポイント（GET）
- `/customers/{customerId}` エンドポイント（PUT）
- `CustomerStatsTO` スキーマ
- `CustomerTO` スキーマ